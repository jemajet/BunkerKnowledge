C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CAPSENSE_CSD_CSHL
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\CapSense_CSD_CSHL.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CapSense_CSD_CSHL.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB
                    - WL(2) PR(.\DP8051_Keil_951\Debug/CapSense_CSD_CSHL.lst) CD OT(0,SIZE) OJ(.\DP8051_Keil_951\Debug\CapSense_CSD_CSHL.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CapSense_CSD_CSHL.c
   3          * Version 3.40
   4          *
   5          * Description:
   6          *  This file provides the source code to the High Level APIs for the CapSesne
   7          *  CSD component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "CapSense_CSD_CSHL.h"
  19          
  20          /* Storage of filters data */
  21          #if ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) | \
  22                (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_AVERAGING_FILTER) )
              
                  uint16 CapSense_CSD_rawFilterData1[CapSense_CSD_TOTAL_SENSOR_COUNT];
                  uint16 CapSense_CSD_rawFilterData2[CapSense_CSD_TOTAL_SENSOR_COUNT];
              
              #elif ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR2_FILTER)   | \
                      (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR4_FILTER)   | \
                      (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_JITTER_FILTER) | \
                      (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR8_FILTER)   | \
                      (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR16_FILTER) )
                      
                  uint16 CapSense_CSD_rawFilterData1[CapSense_CSD_TOTAL_SENSOR_COUNT];
              
              #else
  36              /* No Raw filters */
  37          #endif  /* ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) || \
  38                  *    (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_AVERAGING_FILTER) )
  39                  */
  40          
  41          uint16 CapSense_CSD_sensorBaseline[CapSense_CSD_TOTAL_SENSOR_COUNT];
  42          uint8 CapSense_CSD_sensorBaselineLow[CapSense_CSD_TOTAL_SENSOR_COUNT];
  43          uint16 CapSense_CSD_sensorSignal[CapSense_CSD_TOTAL_SENSOR_COUNT];
  44          uint8 CapSense_CSD_sensorOnMask[(((CapSense_CSD_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)];
  45          
  46          uint8 CapSense_CSD_lowBaselineResetCnt[CapSense_CSD_TOTAL_SENSOR_COUNT];
  47          
  48          const uint16 CYCODE CapSense_CSD_fingerThreshold[] = {
  49              84u, 124u, 66u, 
  50          };
  51          
  52          const uint16 CYCODE CapSense_CSD_noiseThreshold[] = {
  53              42u, 45u, 33u, 
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 2   

  54          };
  55          
  56          const uint16 CYCODE CapSense_CSD_hysteresis[] = {
  57              0u, 18u, 9u, 
  58          };
  59          
  60          const uint8 CYCODE CapSense_CSD_debounce[] = {
  61              1u, 5u, 5u, 
  62          };
  63          
  64          uint8 CapSense_CSD_debounceCounter[] = {
  65              0u, 0u, 0u, 
  66          };
  67          
  68          const uint8 CYCODE CapSense_CSD_rawDataIndex[] = {
  69              2u, /* LinearSlider0__LS */
  70              0u, /* Button0__BTN */
  71              1u, /* Button1__BTN */
  72          
  73          };
  74          
  75          const uint8 CYCODE CapSense_CSD_numberOfSensors[] = {
  76              5u, /* LinearSlider0__LS */
  77              1u, /* Button0__BTN */
  78              1u, /* Button1__BTN */
  79          
  80          };
  81          
  82          const uint16 CYCODE CapSense_CSD_centroidMult[] = {
  83              6400u, 
  84          };
  85          
  86          
  87          
  88          
  89          /*******************************************************************************
  90          * Function Name: CapSense_CSD_BaseInit
  91          ********************************************************************************
  92          *
  93          * Summary:
  94          *  Loads the CapSense_CSD_sensorBaseline[sensor] array element with an 
  95          *  initial value which is equal to raw count value. 
  96          *  Resets to zero CapSense_CSD_sensorBaselineLow[sensor] and 
  97          *  CapSense_CSD_sensorSignal[sensor] array element.
  98          *  Loads CapSense_CSD_debounceCounter[sensor] array element with initial 
  99          *  value equal CapSense_CSD_debounce[].
 100          *  Loads the CapSense_CSD_rawFilterData2[sensor] and 
 101          *  CapSense_CSD_rawFilterData2[sensor] array element with an 
 102          *  initial value which is equal raw count value if raw data filter is enabled.
 103          *
 104          * Parameters:
 105          *  sensor:  Sensor number.
 106          *
 107          * Return:
 108          *  None
 109          *
 110          * Global Variables:
 111          *  CapSense_CSD_sensorBaseline[]    - used to store baseline value.
 112          *  CapSense_CSD_sensorBaselineLow[] - used to store fraction byte of 
 113          *  baseline value.
 114          *  CapSense_CSD_sensorSignal[]      - used to store diffence between 
 115          *  current value of raw data and previous value of baseline.
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 3   

 116          *  CapSense_CSD_debounceCounter[]   - used to store current debounce 
 117          *  counter of sensor. Widget which has this parameter are buttons, matrix 
 118          *  buttons, proximity, guard. All other widgets haven't debounce parameter
 119          *  and use the last element of this array with value 0 (it means no debounce).
 120          *  CapSense_CSD_rawFilterData1[]    - used to store previous sample of 
 121          *  any enabled raw data filter.
 122          *  CapSense_CSD_rawFilterData2[]    - used to store before previous sample
 123          *  of enabled raw data filter. Only required for median or average filters.
 124          *
 125          * Reentrant:
 126          *  No
 127          *
 128          *******************************************************************************/
 129          void CapSense_CSD_BaseInit(uint8 sensor) 
 130          {
 131   1          #if ((CapSense_CSD_TOTAL_BUTTONS_COUNT) || (CapSense_CSD_TOTAL_MATRIX_BUTTONS_COUNT) || \
 132   1               (CapSense_CSD_TOTAL_GENERICS_COUNT))
 133   1              uint8 widget = CapSense_CSD_widgetNumber[sensor];
 134   1          #endif /* ((CapSense_CSD_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_CSD_TOTAL_MATRIX_BUTTONS_COUNT)) */
 135   1          
 136   1          #if (CapSense_CSD_TOTAL_MATRIX_BUTTONS_COUNT)
                      uint8 debounceIndex;
                  #endif  /* (CapSense_CSD_TOTAL_MATRIX_BUTTONS_COUNT) */
 139   1          
 140   1          #if (CapSense_CSD_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      if(widget < CapSense_CSD_END_OF_WIDGETS_INDEX)
                      {
                  #endif  /* CapSense_CSD_TOTAL_GENERICS_COUNT */
 145   1          
 146   1          /* Initialize Baseline */
 147   1          CapSense_CSD_sensorBaseline[sensor] = CapSense_CSD_sensorRaw[sensor];
 148   1          CapSense_CSD_sensorBaselineLow[sensor] = 0u;
 149   1          CapSense_CSD_sensorSignal[sensor] = 0u;
 150   1              
 151   1          if(widget > CapSense_CSD_END_OF_TOUCH_PAD_INDEX)
 152   1          {
 153   2              CapSense_CSD_debounceCounter[widget - (CapSense_CSD_END_OF_TOUCH_PAD_INDEX + 1)] =  CapSense_CSD_d
             -ebounce[widget];
 154   2          }
 155   1      
 156   1          
 157   1          #if ((CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) |\
 158   1               (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_AVERAGING_FILTER))
              
                      CapSense_CSD_rawFilterData1[sensor] = CapSense_CSD_sensorRaw[sensor];
                      CapSense_CSD_rawFilterData2[sensor] = CapSense_CSD_sensorRaw[sensor];
                  
                  #elif ((CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR2_FILTER) |\
                         (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR4_FILTER) |\
                         (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_JITTER_FILTER) |\
                         (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR8_FILTER) |\
                         (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR16_FILTER))
                          
                      CapSense_CSD_rawFilterData1[sensor] = CapSense_CSD_sensorRaw[sensor];
                  
                  #else
 172   1              /* No Raw filters */
 173   1          #endif  /* ((CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) | \
 174   1                  *   (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_AVERAGING_FILTER))
 175   1                  */
 176   1          
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 4   

 177   1          #if (CapSense_CSD_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      }
                  #endif  /* CapSense_CSD_TOTAL_GENERICS_COUNT */
 181   1      }
 182          
 183          
 184          /*******************************************************************************
 185          * Function Name: CapSense_CSD_InitializeSensorBaseline
 186          ********************************************************************************
 187          *
 188          * Summary:
 189          *  Loads the CapSense_CSD_sensorBaseline[sensor] array element with an 
 190          *  initial value by scanning the selected sensor (one channel design) or pair 
 191          *  of sensors (two channels designs). The raw count value is copied into the 
 192          *  baseline array for each sensor. The raw data filters are initialized if 
 193          *  enabled.
 194          *
 195          * Parameters:
 196          *  sensor:  Sensor number.
 197          *
 198          * Return:
 199          *  None
 200          *
 201          * Reentrant:
 202          *  No
 203          *
 204          *******************************************************************************/
 205          void CapSense_CSD_InitializeSensorBaseline(uint8 sensor)
 206                                    
 207          {
 208   1          /* Scan sensor */
 209   1          CapSense_CSD_ScanSensor(sensor);
 210   1          while(CapSense_CSD_IsBusy() != 0u)
 211   1          {
 212   2              /* Wait while busy */
 213   2          }
 214   1          
 215   1          #if (CapSense_CSD_DESIGN_TYPE == CapSense_CSD_ONE_CHANNEL_DESIGN)
 216   1              /* Initialize Baseline, Signal and debounce counters */       
 217   1              CapSense_CSD_BaseInit(sensor);
 218   1              
 219   1          #else
                  
                      if(sensor < CapSense_CSD_TOTAL_SENSOR_COUNT__CH0)
                      {
                          /* Initialize Baseline, Signal and debounce counters */ 
                          CapSense_CSD_BaseInit(sensor);
                      }
                      
                      if(sensor < CapSense_CSD_TOTAL_SENSOR_COUNT__CH1)
                      {
                          /* Initialize Baseline, Signal and debounce counters */
                          CapSense_CSD_BaseInit(sensor + CapSense_CSD_TOTAL_SENSOR_COUNT__CH0);
                      }
                  
                  #endif  /* (CapSense_CSD_DESIGN_TYPE == CapSense_CSD_ONE_CHANNEL_DESIGN) */
 234   1      }
 235          
 236          
 237          /*******************************************************************************
 238          * Function Name: CapSense_CSD_InitializeAllBaselines
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 5   

 239          ********************************************************************************
 240          *
 241          * Summary:
 242          *  Uses the CapSense_CSD_InitializeSensorBaseline function to loads the 
 243          *  CapSense_CSD_sensorBaseline[] array with an initial values by scanning 
 244          *  all sensors. The raw count values are copied into the baseline array for 
 245          *  all sensors. The raw data filters are initialized if enabled.
 246          *
 247          * Parameters:
 248          *  None
 249          *
 250          * Return:
 251          *  None
 252          *
 253          * Reentrant:
 254          *  No
 255          *
 256          *******************************************************************************/
 257          void CapSense_CSD_InitializeAllBaselines(void)
 258                                    
 259          {
 260   1          uint8 i;
 261   1          
 262   1          /* The baseline initialize by sensor of sensor pair */
 263   1          for(i = 0u; i < CapSense_CSD_TOTAL_SCANSLOT_COUNT; i++)
 264   1          {
 265   2              CapSense_CSD_InitializeSensorBaseline(i);
 266   2          }
 267   1      }
 268          
 269          
 270          /*******************************************************************************
 271          * Function Name: CapSense_CSD_InitializeEnabledBaselines
 272          ********************************************************************************
 273          *
 274          * Summary:
 275          *  Scans all enabled widgets and the raw count values are copied into the 
 276          *  baseline array for all sensors enabled in scanning process. Baselines 
 277          *  initialize with zero values for sensors disabled from scanning process. 
 278          *  The raw data filters are initialized if enabled.
 279          *
 280          * Parameters:
 281          *  None
 282          *
 283          * Return:
 284          *  None
 285          *
 286          * Reentrant:
 287          *  No
 288          *
 289          *******************************************************************************/
 290          void CapSense_CSD_InitializeEnabledBaselines(void)
 291                                       
 292          {
 293   1          uint8 i;
 294   1          uint8 pos;
 295   1          uint8 enMask;
 296   1          
 297   1          CapSense_CSD_ScanEnabledWidgets();
 298   1          while(CapSense_CSD_IsBusy() != 0u)
 299   1          {
 300   2              /* Wait while busy */
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 6   

 301   2          }
 302   1          
 303   1          for(i = 0u; i < CapSense_CSD_TOTAL_SENSOR_COUNT; i++)
 304   1          {
 305   2              pos = (i >> 3u);
 306   2              enMask = 0x01u << (i & 0x07u);
 307   2              
 308   2              /* Clear raw data if sensor is disabled from scanning process */
 309   2              if((CapSense_CSD_sensorEnableMask[pos] & enMask) == 0u)
 310   2              {
 311   3                  CapSense_CSD_sensorRaw[i] = 0u;
 312   3              }
 313   2              
 314   2              /* Initialize baselines */
 315   2              CapSense_CSD_BaseInit(i);
 316   2          }
 317   1      }  
 318          
 319          
 320          /*******************************************************************************
 321          * Function Name: CapSense_CSD_UpdateSensorBaseline
 322          ********************************************************************************
 323          *
 324          * Summary:
 325          *  Updates the CapSense_CSD_sensorBaseline[sensor] array element using the 
 326          *  LP filter with k = 256. The signal calculates the difference of count by 
 327          *  subtracting the previous baseline from the current raw count value and stores
 328          *  it in CapSense_CSD_SensorSignal[sensor]. 
 329          *  If auto reset option is enabled the baseline updated regards noise threshold. 
 330          *  If auto reset option is disabled the baseline stops updating if signal is 
 331          *  greater that zero and baseline loads with raw count value if signal is less 
 332          *  that noise threshold.
 333          *  Raw data filters are applied to the values if enabled before baseline 
 334          *  calculation.
 335          *
 336          * Parameters:
 337          *  sensor:  Sensor number.
 338          *
 339          * Return:
 340          *  None
 341          *
 342          * Global Variables:
 343          *  CapSense_CSD_sensorBaseline[]    - used to store baseline value.
 344          *  CapSense_CSD_sensorBaselineLow[] - used to store fraction byte of 
 345          *  baseline value.
 346          *  CapSense_CSD_sensorSignal[]      - used to store diffence between 
 347          *  current value of raw data and previous value of baseline.
 348          *  CapSense_CSD_rawFilterData1[]    - used to store previous sample of 
 349          *  any enabled raw data filter.
 350          *  CapSense_CSD_rawFilterData2[]    - used to store before previous sample
 351          *  of enabled raw data filter. Only required for median or average filters.
 352          *
 353          * Reentrant:
 354          *  No
 355          *
 356          *******************************************************************************/
 357           void CapSense_CSD_UpdateSensorBaseline(uint8 sensor)
 358                                           
 359          {
 360   1          uint32 calc;
 361   1          uint16 tempRaw;
 362   1          uint16 filteredRawData;
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 7   

 363   1          uint8 widget = CapSense_CSD_widgetNumber[sensor];
 364   1          uint16 noiseThreshold = CapSense_CSD_noiseThreshold[widget];
 365   1          
 366   1          #if (CapSense_CSD_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      if(widget < CapSense_CSD_END_OF_WIDGETS_INDEX)
                      {
                  #endif  /* CapSense_CSD_TOTAL_GENERICS_COUNT */
 371   1          
 372   1          filteredRawData = CapSense_CSD_sensorRaw[sensor];
 373   1          
 374   1          #if (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER)
                      tempRaw = filteredRawData;
                      filteredRawData = CapSense_CSD_MedianFilter(filteredRawData, CapSense_CSD_rawFilterData1[sensor], 
                                                                      CapSense_CSD_rawFilterData2[sensor]);
                      CapSense_CSD_rawFilterData2[sensor] = CapSense_CSD_rawFilterData1[sensor];
                      CapSense_CSD_rawFilterData1[sensor] = tempRaw;
                      
                  #elif (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_AVERAGING_FILTER)
                      tempRaw = filteredRawData;
                      filteredRawData = CapSense_CSD_AveragingFilter(filteredRawData, CapSense_CSD_rawFilterData1[sensor
             -],
                                                                         CapSense_CSD_rawFilterData2[sensor]);
                      CapSense_CSD_rawFilterData2[sensor] = CapSense_CSD_rawFilterData1[sensor];
                      CapSense_CSD_rawFilterData1[sensor] = tempRaw;
                      
                  #elif (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR2_FILTER)
                      filteredRawData = CapSense_CSD_IIR2Filter(filteredRawData, CapSense_CSD_rawFilterData1[sensor]);
                      CapSense_CSD_rawFilterData1[sensor] = filteredRawData;
                      
                  #elif (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR4_FILTER)
                      filteredRawData = CapSense_CSD_IIR4Filter(filteredRawData, CapSense_CSD_rawFilterData1[sensor]);
                      CapSense_CSD_rawFilterData1[sensor] = filteredRawData;
                          
                  #elif (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_JITTER_FILTER)
                      filteredRawData = CapSense_CSD_JitterFilter(filteredRawData, CapSense_CSD_rawFilterData1[sensor]);
                      CapSense_CSD_rawFilterData1[sensor] = filteredRawData;
                      
                  #elif (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR8_FILTER)
                      filteredRawData = CapSense_CSD_IIR8Filter(filteredRawData, CapSense_CSD_rawFilterData1[sensor]);
                      CapSense_CSD_rawFilterData1[sensor] = filteredRawData;
                      
                  #elif (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR16_FILTER)
                      filteredRawData = CapSense_CSD_IIR16Filter(filteredRawData, CapSense_CSD_rawFilterData1[sensor]);
                      CapSense_CSD_rawFilterData1[sensor] = filteredRawData;
                      
                  #else
 409   1              /* No Raw filters */
 410   1          #endif  /* (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) */
 411   1          
 412   1          #if (CapSense_CSD_TUNING_METHOD == CapSense_CSD_AUTO_TUNING)
                      CapSense_CSD_CalculateThresholds(sensor);
                  #endif /* (CapSense_CSD_TUNING_METHOD == CapSense_CSD_AUTO_TUNING) */
 415   1      
 416   1      
 417   1          /* Baseline calculation */
 418   1          /* Calculate difference RawData[cur] - Baseline[prev] */
 419   1          if(filteredRawData >= CapSense_CSD_sensorBaseline[sensor])
 420   1          {
 421   2              tempRaw = filteredRawData - CapSense_CSD_sensorBaseline[sensor];
 422   2              widget = 1u;    /* Positive difference - Calculate the Signal */
 423   2          }
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 8   

 424   1          else
 425   1          {
 426   2              tempRaw = CapSense_CSD_sensorBaseline[sensor] - filteredRawData;
 427   2              widget = 0u;    /* Negative difference - Do NOT calculate the Signal */
 428   2          }
 429   1      
 430   1          if((widget == 0u) && (tempRaw > (uint16) CapSense_CSD_NEGATIVE_NOISE_THRESHOLD))
 431   1          {
 432   2              if(CapSense_CSD_lowBaselineResetCnt[sensor] >= CapSense_CSD_LOW_BASELINE_RESET)
 433   2              {
 434   3                  CapSense_CSD_BaseInit(sensor);
 435   3                  CapSense_CSD_lowBaselineResetCnt[sensor] = 0u;
 436   3              }
 437   2              else
 438   2              {
 439   3                  CapSense_CSD_lowBaselineResetCnt[sensor]++;
 440   3              }
 441   2          }
 442   1          else
 443   1          {
 444   2              #if (CapSense_CSD_AUTO_RESET == CapSense_CSD_AUTO_RESET_DISABLE)
 445   2                  /* Update Baseline if lower that noiseThreshold */
 446   2                  if ( (tempRaw <= (uint16) noiseThreshold) || 
 447   2                       ((tempRaw < (uint16) CapSense_CSD_NEGATIVE_NOISE_THRESHOLD)
 448   2                         && (widget == 0u)))
 449   2                  {
 450   3              #endif /* (CapSense_CSD_AUTO_RESET == CapSense_CSD_AUTO_RESET_DISABLE) */
 451   3                      /* Make full Baseline 23 bits */
 452   3                      calc = (uint32) CapSense_CSD_sensorBaseline[sensor] << 8u;
 453   3                      calc |= (uint32) CapSense_CSD_sensorBaselineLow[sensor];
 454   3      
 455   3                      /* Add Raw Data to Baseline */
 456   3                      calc += filteredRawData;
 457   3      
 458   3                      /* Sub the high Baseline */
 459   3                      calc -= CapSense_CSD_sensorBaseline[sensor];
 460   3      
 461   3                      /* Put Baseline and BaselineLow */
 462   3                      CapSense_CSD_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 463   3                      CapSense_CSD_sensorBaselineLow[sensor] = ((uint8) calc);
 464   3      
 465   3                      CapSense_CSD_lowBaselineResetCnt[sensor] = 0u;
 466   3              #if (CapSense_CSD_AUTO_RESET == CapSense_CSD_AUTO_RESET_DISABLE)
 467   3                  }
 468   2              #endif /* (CapSense_CSD_AUTO_RESET == CapSense_CSD_AUTO_RESET_DISABLE) */
 469   2          }
 470   1      
 471   1          /* Calculate Signal if possitive difference > noiseThreshold */
 472   1          if((tempRaw > (uint16) noiseThreshold) && (widget != 0u))
 473   1          {
 474   2              #if (CapSense_CSD_SIGNAL_SIZE == CapSense_CSD_SIGNAL_SIZE_UINT8)
                          /* Over flow defence for uint8 */
                          if (tempRaw > 0xFFu)
                          {
                              CapSense_CSD_sensorSignal[sensor] = 0xFFu;
                          }    
                          else 
                          {
                              CapSense_CSD_sensorSignal[sensor] = ((uint8) tempRaw);
                          }
                      #else
 485   2                  CapSense_CSD_sensorSignal[sensor] = ((uint16) tempRaw);
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 9   

 486   2              #endif  /* (CapSense_CSD_SIGNAL_SIZE == CapSense_CSD_SIGNAL_SIZE_UINT8) */
 487   2          }
 488   1          else
 489   1          {
 490   2              /* Signal is zero */
 491   2              CapSense_CSD_sensorSignal[sensor] = 0u;
 492   2          }
 493   1      
 494   1          #if (CapSense_CSD_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      }
                  #endif  /* CapSense_CSD_TOTAL_GENERICS_COUNT */
 498   1      }
 499          
 500          
 501          /*******************************************************************************
 502          * Function Name: CapSense_CSD_UpdateEnabledBaselines
 503          ********************************************************************************
 504          *
 505          * Summary:
 506          *  Checks CapSense_CSD_sensorEnableMask[] array and calls the 
 507          *  CapSense_CSD_UpdateSensorBaseline function to update the baselines 
 508          *  for enabled sensors.
 509          *
 510          * Parameters:
 511          *  None
 512          *
 513          * Return:
 514          *  None
 515          *
 516          * Global Variables:
 517          *  CapSense_CSD_sensorEnableMask[] - used to store the sensor scanning 
 518          *  state.
 519          *  CapSense_CSD_sensorEnableMask[0] contains the masked bits for sensors 
 520          *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 521          *  CapSense_CSD_sensorEnableMask[1] contains the masked bits for 
 522          *  sensors 8 through 15 (if needed), and so on.
 523          *  0 - sensor doesn't scan by CapSense_CSD_ScanEnabledWidgets().
 524          *  1 - sensor scans by CapSense_CSD_ScanEnabledWidgets().
 525          *
 526          * Reentrant:
 527          *  No
 528          *
 529          *******************************************************************************/
 530           void CapSense_CSD_UpdateEnabledBaselines(void)
 531                                           
 532          {
 533   1          uint8 i;
 534   1          uint8 pos;
 535   1          uint8 enMask;
 536   1          
 537   1          for(i = 0u; i < CapSense_CSD_TOTAL_SENSOR_COUNT; i++)
 538   1          {
 539   2              pos = (i >> 3u);
 540   2              enMask = (uint8)(0x01u << (i & 0x07u));
 541   2              if((CapSense_CSD_sensorEnableMask[pos] & enMask) != 0u)
 542   2              {
 543   3                  CapSense_CSD_UpdateSensorBaseline(i);
 544   3              }
 545   2          }
 546   1      }
 547          
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 10  

 548          
 549          /*******************************************************************************
 550          * Function Name: CapSense_CSD_CheckIsSensorActive
 551          ********************************************************************************
 552          *
 553          * Summary:
 554          *  Compares the CapSense_CSD_SensorSignal[sensor] array element to finger
 555          *  threshold of widget it belongs to. The hysteresis and debounce are taken into 
 556          *  account. The hysteresis is added or subtracted from the finger threshold 
 557          *  based on whether the sensor is currently active. 
 558          *  If the sensor is active, the threshold is lowered by the hysteresis amount.
 559          *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
 560          *  The debounce counter added to the sensor active transition.
 561          *  This function updates CapSense_CSD_SensorOnMask[] array element.
 562          *
 563          * Parameters:
 564          *  sensor:  Sensor number.
 565          *
 566          * Return:
 567          *  Returns sensor state 1 if active, 0 if not active.
 568          *
 569          * Global Variables:
 570          *  CapSense_CSD_sensorSignal[]      - used to store diffence between 
 571          *  current value of raw data and previous value of baseline.
 572          *  CapSense_CSD_debounceCounter[]   - used to store current debounce 
 573          *  counter of sensor. Widget which has this parameter are buttons, matrix 
 574          *  buttons, proximity, guard. All other widgets haven't debounce parameter
 575          *  and use the last element of this array with value 0 (it means no debounce).
 576          *  CapSense_CSD_sensorOnMask[] - used to store sensors on/off state.
 577          *  CapSense_CSD_sensorOnMask[0] contains the masked bits for sensors 
 578          *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 579          *  CapSense_CSD_sensorEnableMask[1] contains the masked bits for 
 580          *  sensors 8 through 15 (if needed), and so on.
 581          *  0 - sensor is inactive.
 582          *  1 - sensor is active.
 583          *
 584          * Reentrant:
 585          *  No
 586          *
 587          *******************************************************************************/
 588          uint8 CapSense_CSD_CheckIsSensorActive(uint8 sensor)
 589                                            
 590          {
 591   1          uint8 debounceIndex;
 592   1          /* Get On/Off mask */
 593   1          uint8 pos = (sensor >> 3u);
 594   1          uint8 onMask = 0x01u << (sensor & 0x07u);
 595   1          /* Prepare to find debounce counter index */
 596   1          uint8 widget = CapSense_CSD_widgetNumber[sensor];
 597   1          uint16 fingerThreshold = CapSense_CSD_fingerThreshold[widget];
 598   1          uint16 hysteresis = CapSense_CSD_hysteresis[widget];
 599   1          uint8 debounce = CapSense_CSD_debounce[widget];
 600   1          
 601   1          if (widget < CapSense_CSD_TOTAL_CENTROIDS_COUNT)
 602   1          {
 603   2              debounceIndex = CapSense_CSD_UNUSED_DEBOUNCE_COUNTER_INDEX;
 604   2              CapSense_CSD_debounceCounter[debounceIndex] = 1u;
 605   2          }
 606   1          else
 607   1          {
 608   2              debounceIndex = widget - (CapSense_CSD_END_OF_TOUCH_PAD_INDEX + 1);
 609   2          }
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 11  

 610   1      
 611   1          
 612   1          /* Was on */
 613   1          if (0u != (CapSense_CSD_sensorOnMask[pos] & onMask))
 614   1          {
 615   2              /* Hysteresis minus */
 616   2              if (CapSense_CSD_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 617   2              {
 618   3                  CapSense_CSD_sensorOnMask[pos] &= (uint8)~onMask;
 619   3                  CapSense_CSD_debounceCounter[debounceIndex] = debounce; 
 620   3              }
 621   2          }
 622   1          else    /* Was off */
 623   1          {
 624   2              /* Hysteresis plus */
 625   2              if (CapSense_CSD_sensorSignal[sensor] > (fingerThreshold + hysteresis))
 626   2              {
 627   3                  /* Sensor active, decrement debounce counter */
 628   3                  if (CapSense_CSD_debounceCounter[debounceIndex] <= 1u)
 629   3                  {
 630   4                      CapSense_CSD_sensorOnMask[pos] |= onMask; 
 631   4                  }
 632   3                  CapSense_CSD_debounceCounter[debounceIndex]--;
 633   3              }
 634   2              else
 635   2              {
 636   3                  /* Sensor inactive - reset Debounce counter */
 637   3                  CapSense_CSD_debounceCounter[debounceIndex] = debounce;
 638   3              }
 639   2          }
 640   1          
 641   1          return (((CapSense_CSD_sensorOnMask[pos] & onMask) != 0u) ? 1u : 0u);
 642   1      }
 643          
 644          
 645          /*******************************************************************************
 646          * Function Name: CapSense_CSD_CheckIsWidgetActive
 647          ********************************************************************************
 648          *
 649          * Summary:
 650          *  Use function CapSense_CSD_CheckIsSensorActive() to update 
 651          *  CapSense_CSD_sensorOnMask[] for all sensors within the widget.
 652          *  If one of sensors within widget is active the function return that widget is 
 653          *  active.
 654          *  The touch pad and matrix buttons widgets need to have active sensor within 
 655          *  col and row to return widget active status.
 656          *
 657          * Parameters:
 658          *  widget:  widget number.
 659          *
 660          * Return:
 661          *  Returns widget sensor state 1 if one or more sensors within widget is/are 
 662          *  active, 0 if all sensors within widget are inactive.
 663          *
 664          * Reentrant:
 665          *  No
 666          *
 667          *******************************************************************************/
 668          uint8 CapSense_CSD_CheckIsWidgetActive(uint8 widget)
 669                                           
 670          {
 671   1          uint8 rawIndex = CapSense_CSD_rawDataIndex[widget];
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 12  

 672   1          uint8 numberOfSensors = CapSense_CSD_numberOfSensors[widget] + rawIndex;
 673   1          uint8 state = 0u;
 674   1      
 675   1          /* Check all sensors of the widget */
 676   1          do
 677   1          {
 678   2              if(CapSense_CSD_CheckIsSensorActive(rawIndex) != 0u)
 679   2              {
 680   3                  state = CapSense_CSD_SENSOR_1_IS_ACTIVE;
 681   3              }
 682   2              rawIndex++;
 683   2          }
 684   1          while(rawIndex < numberOfSensors);
 685   1          
 686   1      
 687   1          
 688   1          return (state);
 689   1      }
 690          
 691          
 692          /*******************************************************************************
 693          * Function Name: CapSense_CSD_CheckIsAnyWidgetActive
 694          ********************************************************************************
 695          *
 696          * Summary:
 697          *  Compares all sensors of the CapSense_CSD_signal[] array to their finger 
 698          *  threshold. Calls CapSense_CSD_CheckIsWidgetActive() for each widget so 
 699          *  the CapSense_CSD_SensorOnMask[] array is up to date after calling this 
 700          *  function.
 701          *
 702          * Parameters:
 703          *  widget:  widget number.
 704          *
 705          * Return:
 706          *  Returns 1 if any widget is active, 0 none of widgets are active.
 707          *
 708          * Reentrant:
 709          *  No
 710          *
 711          *******************************************************************************/
 712          uint8 CapSense_CSD_CheckIsAnyWidgetActive(void)
 713                                           
 714          {
 715   1          uint8 i;
 716   1          uint8 state = 0u;
 717   1          
 718   1          for(i = 0u; i < CapSense_CSD_TOTAL_WIDGET_COUNT; i++)
 719   1          {
 720   2              if (CapSense_CSD_CheckIsWidgetActive(i) != 0u)
 721   2              {
 722   3                  state = CapSense_CSD_WIDGET_IS_ACTIVE;
 723   3              }
 724   2          }
 725   1          
 726   1      
 727   1          return (state);
 728   1      }
 729          
 730          
 731          /*******************************************************************************
 732          * Function Name: CapSense_CSD_EnableWidget
 733          ********************************************************************************
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 13  

 734          *
 735          * Summary:
 736          *  Enable all widget elements (sensors) to scanning process.
 737          *
 738          * Parameters:
 739          *  widget:  widget number.
 740          *
 741          * Return:
 742          *  None
 743          *
 744          * Global Variables:
 745          *  CapSense_CSD_sensorEnableMask[] - used to store the sensor scanning 
 746          *  state.
 747          *  CapSense_CSD_sensorEnableMask[0] contains the masked bits for sensors 
 748          *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 749          *  CapSense_CSD_sensorEnableMask[1] contains the masked bits for 
 750          *  sensors 8 through 15 (if needed), and so on.
 751          *  0 - sensor doesn't scan by CapSense_CSD_ScanEnabledWidgets().
 752          *  1 - sensor scans by CapSense_CSD_ScanEnabledWidgets().
 753          *
 754          * Reentrant:
 755          *  No
 756          *
 757          *******************************************************************************/
 758          void CapSense_CSD_EnableWidget(uint8 widget)
 759                                             
 760          {
 761   1          uint8 pos;
 762   1          uint8 enMask;
 763   1          uint8 rawIndex = CapSense_CSD_rawDataIndex[widget];
 764   1          uint8 numberOfSensors = CapSense_CSD_numberOfSensors[widget] + rawIndex;
 765   1          
 766   1          /* Enable all sensors of the widget */
 767   1          do
 768   1          {
 769   2              pos = (rawIndex >> 3u);
 770   2              enMask = 0x01u << (rawIndex & 0x07u);
 771   2              
 772   2              CapSense_CSD_sensorEnableMask[pos] |= enMask;
 773   2              rawIndex++;
 774   2          }
 775   1          while(rawIndex < numberOfSensors);
 776   1          
 777   1      
 778   1      }
 779          
 780          
 781          /*******************************************************************************
 782          * Function Name: CapSense_CSD_DisableWidget
 783          ********************************************************************************
 784          *
 785          * Summary:
 786          *  Disable all widget elements (sensors) from scanning process.
 787          *
 788          * Parameters:
 789          *  widget:  widget number.
 790          *
 791          * Return:
 792          *  None
 793          *
 794          * Global Variables:
 795          *  CapSense_CSD_sensorEnableMask[] - used to store the sensor scanning 
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 14  

 796          *  state.
 797          *  CapSense_CSD_sensorEnableMask[0] contains the masked bits for sensors 
 798          *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 799          *  CapSense_CSD_sensorEnableMask[1] contains the masked bits for 
 800          *  sensors 8 through 15 (if needed), and so on.
 801          *  0 - sensor doesn't scan by CapSense_CSD_ScanEnabledWidgets().
 802          *  1 - sensor scans by CapSense_CSD_ScanEnabledWidgets().
 803          *
 804          * Reentrant:
 805          *  No
 806          *
 807          *******************************************************************************/
 808          void CapSense_CSD_DisableWidget(uint8 widget)
 809                                              
 810          {
 811   1          uint8 pos;
 812   1          uint8 enMask;
 813   1          uint8 rawIndex = CapSense_CSD_rawDataIndex[widget];
 814   1          uint8 numberOfSensors = CapSense_CSD_numberOfSensors[widget] + rawIndex;
 815   1         
 816   1          /* Disable all sensors of the widget */
 817   1          do
 818   1          {
 819   2              pos = (rawIndex >> 3u);
 820   2              enMask = 0x01u << (rawIndex & 0x07u);
 821   2              
 822   2              CapSense_CSD_sensorEnableMask[pos] &= (uint8)~enMask;
 823   2              rawIndex++;
 824   2          }
 825   1          while(rawIndex < numberOfSensors);
 826   1          
 827   1      
 828   1      }
 829          #if(CapSense_CSD_TOTAL_CENTROIDS_COUNT)
 830              /*******************************************************************************
 831              * Function Name: CapSense_CSD_FindMaximum
 832              ********************************************************************************
 833              *
 834              * Summary:
 835              *  Finds index of maximum element within defined centroid. Checks 
 836              *  CapSense_CSD_SensorSignal[] within defined cenrtoid and 
 837              *  returns index of maximum element. The values below finger threshold are 
 838              *  ignored.
 839              *  The centrod defines by offset of first element and number of elements - count.
 840              *  The diplexed centroid requires at least consecutive two elements above
 841              *  FingerThreshold to find index of maximum element.
 842              * 
 843              * Parameters:
 844              *  offset:  Start index of cetroid in CapSense_CSD_sensorSignal[] array.
 845              *  count:   number of elements within centroid.
 846              *  fingerThreshold:  Finger threshould.
 847              *  diplex:   pointer to diplex table.
 848              * 
 849              * Return:
 850              *  Returns index of maximum element within defined centroid.
 851              *  If index of maximum element doesn't find the 0xFF returns.
 852              * 
 853              *******************************************************************************/
 854              #if (CapSense_CSD_IS_DIPLEX_SLIDER)
                      uint8 CapSense_CSD_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold, const uint8 CYCO
             -DE *diplex)
                                                             
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 15  

                  #else 
 858                  uint8 CapSense_CSD_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold)
 859                                                         
 860              #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
 861              {
 862   1              uint8 i;
 863   1              #if (CapSense_CSD_IS_DIPLEX_SLIDER)        
                          uint8 curPos = 0u;
                          /* No centroid at the Start */
                          uint8 curCntrdSize = 0u;
                          uint8 curCtrdStartPos = 0xFFu;
                          /* The biggset centroid is zero */
                          uint8 biggestCtrdSize = 0u;
                          uint8 biggestCtrdStartPos = 0u;
                      #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
 872   1              uint8 maximum = 0xFFu;
 873   1              uint16 temp = 0u;
 874   1              uint16 *startOfSlider = &CapSense_CSD_sensorSignal[offset]; 
 875   1      
 876   1              #if (CapSense_CSD_IS_DIPLEX_SLIDER)        
                          if(diplex != 0u)
                          {
                              /* Initialize */
                              i = 0u;
                              
                              /* Make slider x2 as Diplexed */
                              count <<= 1u;
                              while(1u)
                              { 
                                  if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
                                  {
                                      if (curCtrdStartPos == 0xFFu)
                                      {
                                          /* Start of centroid */
                                          curCtrdStartPos = i;
                                          curCntrdSize++;
                                      }
                                      else
                                      {
                                          curCntrdSize++;
                                      }
                                  }
                                  else   /* Select the bigest and indicate zero start */
                                  {          
                                      if(curCntrdSize > 0u)
                                      {
                                          /* We are in the end of current */
                                          if(curCntrdSize > biggestCtrdSize)
                                          {
                                              biggestCtrdSize = curCntrdSize;
                                              biggestCtrdStartPos = curCtrdStartPos;
                                          }
                                          
                                          curCntrdSize = 0u;
                                          curCtrdStartPos = 0xFFu;
                                      }
                                  }
                                  
                                  i++; 
                                  curPos = diplex[i];
                                  if(i == count)
                                  {
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 16  

                                      break;
                                  }            
                              }
                                  
                                  /* Find the biggest centroid if two are the same size, last one wins
                                     We are in the end of current */
                              if (curCntrdSize >= biggestCtrdSize) 
                              {
                                  biggestCtrdSize = curCntrdSize;
                                  biggestCtrdStartPos = curCtrdStartPos;
                              }
                          }
                          else
                          {
                              /* Without diplexing */ 
                              biggestCtrdSize = count;
                          }
                                      
              
                          /* Check centroid size */
                          #if (CapSense_CSD_IS_NON_DIPLEX_SLIDER)
                              if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
                          #else                    
                              if(biggestCtrdSize >= 2u)
                          #endif /* (CapSense_CSD_IS_NON_DIPLEX_SLIDER) */
                              {
                                  for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
                                  {
                                      #if (CapSense_CSD_IS_DIPLEX_SLIDER && CapSense_CSD_IS_NON_DIPLEX_SLIDER)
                                          if (diplex == 0u)
                                          {
                                              curPos = i;
                                          }
                                          else
                                          {
                                              curPos = diplex[i];
                                          }                    
                                      #elif (CapSense_CSD_IS_DIPLEX_SLIDER)                    
                                          curPos = diplex[i];                    
                                      #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER && CapSense_CSD_IS_NON_DIPLEX_SLIDER) */
                                      /* Looking for the grater element within centroid */
                                      if(startOfSlider[curPos] > fingerThreshold)
                                      {
                                          if(startOfSlider[curPos] > temp)
                                          {
                                              maximum = i;
                                              temp = startOfSlider[curPos];
                                          }
                                      }
                                  }
                              } 
                      #else
 971   1                  for (i = 0u; i < count; i++)
 972   1                  {                      
 973   2                      /* Looking for the grater element within centroid */
 974   2                      if(startOfSlider[i] > fingerThreshold)
 975   2                      {
 976   3                          if(startOfSlider[i] > temp)
 977   3                          {
 978   4                              maximum = i;
 979   4                              temp = startOfSlider[i];
 980   4                          }
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 17  

 981   3                      }
 982   2                  }    
 983   1              #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
 984   1              return (maximum);
 985   1          }
 986              
 987              
 988              /*******************************************************************************
 989              * Function Name: CapSense_CSD_CalcCentroid
 990              ********************************************************************************
 991              *
 992              * Summary:
 993              *  Returns position value calculated accoring index of maximum element and API
 994              *  resolution.
 995              *
 996              * Parameters:
 997              *  type:  widget type.
 998              *  diplex:  pointer to diplex table.
 999              *  maximum:  Index of maximum element within centroid.
1000              *  offset:   Start index of cetroid in CapSense_CSD_SensorSignal[] array.
1001              *  count:    Number of elements within centroid.
1002              *  resolution:  multiplicator calculated according to centroid type and
1003              *  API resolution.
1004              *  noiseThreshold:  Noise threshould.
1005              * 
1006              * Return:
1007              *  Returns position value of the slider.
1008              * 
1009              *
1010              * Reentrant:
1011              *  No.
1012              *
1013              *******************************************************************************/
1014              uint8 CapSense_CSD_CalcCentroid(uint8 maximum, uint8 offset, 
1015                                                  uint8 count, uint16 resolution, uint16 noiseThreshold)
1016                                                      
1017              {
1018   1              #if ((CapSense_CSD_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_CSD_TOTAL_TOUCH_PADS_COUNT > 0u))
1019   1                  uint8 posPrev = 0u;
1020   1                  uint8 posNext = 0u;
1021   1              #endif /* ((CapSense_CSD_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_CSD_TOTAL_TOUCH_PADS_COUNT>0u
             -)) */
1022   1                     
1023   1              #if (CapSense_CSD_IS_DIPLEX_SLIDER)                
                          uint8 pos;
                      #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
1026   1              
1027   1              /* Helps while centroid calulation */
1028   1              static uint16 CapSense_CSD_centroid[3u];
1029   1      
1030   1              uint8 position;
1031   1              uint32 numerator;
1032   1              int32 denominator;
1033   1              uint16 *startOfSlider = &CapSense_CSD_sensorSignal[offset];
1034   1                          
1035   1              #if (CapSense_CSD_ADD_SLIDER_TYPE)
                          if(type == CapSense_CSD_TYPE_RADIAL_SLIDER)
                          {
                      #endif /* (CapSense_CSD_ADD_SLIDER_TYPE) */
1039   1      
1040   1                  #if (CapSense_CSD_TOTAL_RADIAL_SLIDERS_COUNT > 0u)                
                              /* Copy Signal for found centriod */
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 18  

                              CapSense_CSD_centroid[CapSense_CSD_POS] = startOfSlider[maximum];
                               
                              /* Check borders for ROTARY Slider */
                              if (maximum == 0u)                   /* Start of centroid */
                              { 
                                  CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = startOfSlider[count - 1u];
                                  CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = startOfSlider[1u];
                              }
                              else if (maximum == (count - 1u))    /* End of centroid */
                              {
                                  CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = startOfSlider[maximum - 1u];
                                  CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = startOfSlider[0u];
                              }
                              else                                /* Not first Not last */
                              {
                                  CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = startOfSlider[maximum - 1u];
                                  CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = startOfSlider[maximum + 1u];
                              }
                          #endif /* (CapSense_CSD_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1061   1      
1062   1              #if (CapSense_CSD_ADD_SLIDER_TYPE)
                          }
                          else
                          {
                      #endif /* (CapSense_CSD_ADD_SLIDER_TYPE) */
1067   1      
1068   1                  #if ((CapSense_CSD_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_CSD_TOTAL_TOUCH_PADS_COUNT > 
             -0u))
1069   1                      #if (CapSense_CSD_IS_DIPLEX_SLIDER && CapSense_CSD_IS_NON_DIPLEX_SLIDER)                  
             -  
                                  /* Calculate next and previous near to maximum */
                                  if(diplex == 0u)
                                  {
                                      pos     = maximum;
                                      posPrev = maximum - 1u;
                                      posNext = maximum + 1u; 
                                  }
                                  else
                                  {
                                      pos     = diplex[maximum];
                                      posPrev = diplex[maximum - 1u];
                                      posNext = diplex[maximum + 1u];
                                      count <<= 1u;
                                  }                    
                              #elif (CapSense_CSD_IS_DIPLEX_SLIDER)
                                  /* Calculate next and previous near to maximum */
                                  pos     = diplex[maximum];
                                  posPrev = diplex[maximum - 1u];
                                  posNext = diplex[maximum + 1u];
                                  count <<= 1u;                    
                              #else                    
1091   1                          /* Calculate next and previous near to maximum */
1092   1                          if (maximum >= 1u)
1093   1                          {
1094   2                              posPrev = maximum - 1u;
1095   2                          }
1096   1                          posNext = maximum + 1u; 
1097   1                      #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER && CapSense_CSD_IS_NON_DIPLEX_SLIDER) */
1098   1                              
1099   1                      /* Copy Signal for found centriod */
1100   1                      #if (CapSense_CSD_IS_DIPLEX_SLIDER)
                                  CapSense_CSD_centroid[CapSense_CSD_POS] = startOfSlider[pos];
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 19  

                              #else
1103   1                          CapSense_CSD_centroid[CapSense_CSD_POS] = startOfSlider[maximum];
1104   1                      #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
1105   1                          
1106   1                      /* Check borders for LINEAR Slider */
1107   1                      if (maximum == 0u)                   /* Start of centroid */
1108   1                      { 
1109   2                          CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = 0u;
1110   2                          CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = startOfSlider[posNext];
1111   2                      }
1112   1                      else if (maximum == ((count) - 1u)) /* End of centroid */
1113   1                      {
1114   2                          CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = startOfSlider[posPrev];
1115   2                          CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = 0u;
1116   2                      }
1117   1                      else                                /* Not first Not last */
1118   1                      {
1119   2                          CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = startOfSlider[posPrev];
1120   2                          CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = startOfSlider[posNext];
1121   2                      }
1122   1                  #endif /* ((CapSense_CSD_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_CSD_TOTAL_TOUCH_PADS_COUNT>
             -0u))*/
1123   1      
1124   1              #if (CapSense_CSD_ADD_SLIDER_TYPE)
                          }
                      #endif /* (CapSense_CSD_ADD_SLIDER_TYPE) */
1127   1          
1128   1              /* Subtract noiseThreshold */
1129   1              if(CapSense_CSD_centroid[CapSense_CSD_POS_PREV] > noiseThreshold)
1130   1              {
1131   2                  CapSense_CSD_centroid[CapSense_CSD_POS_PREV] -= noiseThreshold;
1132   2              }
1133   1              else
1134   1              {
1135   2                  CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = 0u;
1136   2              }
1137   1              
1138   1              /* Maximum always grater than fingerThreshold, so grate than noiseThreshold */
1139   1              CapSense_CSD_centroid[CapSense_CSD_POS] -= noiseThreshold;
1140   1              
1141   1              /* Subtract noiseThreshold */
1142   1              if(CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] > noiseThreshold)
1143   1              {
1144   2                  CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] -= noiseThreshold;
1145   2              }
1146   1              else
1147   1              {
1148   2                  CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = 0u;
1149   2              }
1150   1              
1151   1              
1152   1              /* Si+1 - Si-1 */
1153   1              numerator = (uint32) CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] -
1154   1                          (uint32) CapSense_CSD_centroid[CapSense_CSD_POS_PREV];
1155   1      
1156   1              /* Si+1 + Si + Si-1 */
1157   1              denominator = (int32) CapSense_CSD_centroid[CapSense_CSD_POS_PREV] + 
1158   1                            (int32) CapSense_CSD_centroid[CapSense_CSD_POS] + 
1159   1                            (int32) CapSense_CSD_centroid[CapSense_CSD_POS_NEXT];
1160   1              
1161   1              /* (numerator/denominator) + maximum */
1162   1              denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((uint32) m
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 20  

             -aximum << 8u));
1163   1      
1164   1              #if(CapSense_CSD_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
                          /* Only required for RADIAL Slider */
                          if(denominator < 0)
                          {
                              denominator += (int32)((uint16)((uint16) count << 8u));
                          }
                      #endif /* (CapSense_CSD_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1171   1      
1172   1              denominator *= (int16)resolution;
1173   1      
1174   1              /* Round the relust and put it to uint8 */
1175   1              position = ((uint8) HI16((uint32)denominator + CapSense_CSD_CENTROID_ROUND_VALUE));
1176   1      
1177   1              return (position);
1178   1          }    
1179          #endif /* (CapSense_CSD_TOTAL_CENTROIDS_COUNT) */
1180          
1181          
1182          #if(CapSense_CSD_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1183              /*******************************************************************************
1184              * Function Name: CapSense_CSD_GetCentroidPos
1185              ********************************************************************************
1186              *
1187              * Summary:
1188              *  Checks the CapSense_CSD_Signal[ ] array for a centroid within
1189              *  slider specified range. The centroid position is calculated to the resolution
1190              *  specified in the CapSense customizer. The position filters are applied to the
1191              *  result if enabled.
1192              *
1193              * Parameters:
1194              *  widget:  Widget number.
1195              *  For every linear slider widget there are defines in this format:
1196              *  #define CapSense_CSD_LS__"widget_name"            5
1197              * 
1198              * Return:
1199              *  Returns position value of the linear slider.
1200              *
1201              * Side Effects:
1202              *  If any sensor within the slider widget is active, the function returns values
1203              *  from zero to the API resolution value set in the CapSense customizer. If no
1204              *  sensors are active, the function returns 0xFFFF. If an error occurs during
1205              *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1206              *  There are no checks of widget type argument provided to this function.
1207              *  The unproper widget type provided will cause unexpected position calculations.
1208              *
1209              * Note:
1210              *  If noise counts on the slider segments are greater than the noise
1211              *  threshold, this subroutine may generate a false centroid result. The noise
1212              *  threshold should be set carefully (high enough above the noise level) so
1213              *  that noise will not generate a false centroid.
1214              *
1215              * Reentrant:
1216              *  No.
1217              *
1218              *******************************************************************************/
1219              uint16 CapSense_CSD_GetCentroidPos(uint8 widget) 
1220              {
1221   1              #if (CapSense_CSD_IS_DIPLEX_SLIDER)
                          const uint8 CYCODE *diplex;
                      #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 21  

1224   1                      
1225   1              #if (0u != CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)
                          uint8 posIndex;
                          uint8 firstTimeIndex = CapSense_CSD_posFiltersData[widget];
                          uint8 posFiltersMask = CapSense_CSD_posFiltersMask[widget];  
                      #endif /* (0u != CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1230   1      
1231   1              #if ((0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1232   1                   (0u != (CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)))
                          uint8 tempPos;
                      #endif /* ((0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)) || 
             -\
                             *   (0u != (CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)))
                             */
1237   1      
1238   1              uint8 maximum;
1239   1              uint16 position;
1240   1              uint8 offset = CapSense_CSD_rawDataIndex[widget];
1241   1              uint8 count = CapSense_CSD_numberOfSensors[widget];
1242   1                              
1243   1              #if (CapSense_CSD_IS_DIPLEX_SLIDER)
                          if(widget < CapSense_CSD_TOTAL_DIPLEXED_SLIDERS_COUNT)
                          {
                              maximum = CapSense_CSD_diplexTable[widget];
                              diplex = &CapSense_CSD_diplexTable[maximum];
                          }
                          else
                          {
                              diplex = 0u;
                          }
                      #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
1254   1      
1255   1              /* Find Maximum within centroid */      
1256   1              #if (CapSense_CSD_IS_DIPLEX_SLIDER)        
                          maximum = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget], diplex
             -);
                      #else
1259   1                  maximum = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget]);
1260   1              #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
1261   1      
1262   1              if (maximum != 0xFFu)
1263   1              {
1264   2                  /* Calculate centroid */
1265   2                  position = (uint16) CapSense_CSD_CalcCentroid(maximum, 
1266   2                               offset, count, CapSense_CSD_centroidMult[widget], CapSense_CSD_noiseThreshold[wid
             -get]);
1267   2      
1268   2                  #if (0u != CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)
                              /* Check if this linear slider has enabled filters */
                              if (0u != (posFiltersMask & CapSense_CSD_ANY_POS_FILTER))
                              {
                                  /* Caluclate position to store filters data */
                                  posIndex  = firstTimeIndex + 1u;
                                  
                                  if (0u == CapSense_CSD_posFiltersData[firstTimeIndex])
                                  {
                                      /* Init filters */
                                      CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
                                      #if ((0u != (CapSense_CSD_MEDIAN_FILTER & \
                                                   CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
                                           (0u != (CapSense_CSD_AVERAGING_FILTER & \
                                                   CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)))
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 22  

              
                                          if ( (0u != (posFiltersMask & CapSense_CSD_MEDIAN_FILTER)) || 
                                               (0u != (posFiltersMask & CapSense_CSD_AVERAGING_FILTER)) )
                                          {
                                              CapSense_CSD_posFiltersData[posIndex + 1u] = (uint8) position;
                                          }
                                      #endif /* ((0u != (CapSense_CSD_MEDIAN_FILTER & \
                                             *           CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
                                             *   (0u != (CapSense_CSD_AVERAGING_FILTER & \
                                             *           CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)))
                                             */
                                      
                                      CapSense_CSD_posFiltersData[firstTimeIndex] = 1u;
                                  }
                                  else
                                  {
                                      /* Do filtering */
                                      #if (0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_M
             -ASK))
                                          if (0u != (posFiltersMask & CapSense_CSD_MEDIAN_FILTER))
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_CSD_MedianFilter(position,
                                                                              (uint16)CapSense_CSD_posFiltersData[posInd
             -ex],
                                                                              (uint16)CapSense_CSD_posFiltersData[posInd
             -ex + 1u]);
                                              CapSense_CSD_posFiltersData[posIndex + 1u] =
                                                                                           CapSense_CSD_posFiltersData[p
             -osIndex];
                                              CapSense_CSD_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif /*(0u != (CapSense_CSD_MEDIAN_FILTER &
                                             *         CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if(0u!=(CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_M
             -ASK))
                                          if (0u != (posFiltersMask & CapSense_CSD_AVERAGING_FILTER)) 
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_CSD_AveragingFilter(position,
                                                                              (uint16)CapSense_CSD_posFiltersData[posInd
             -ex],
                                                                              (uint16)CapSense_CSD_posFiltersData[posInd
             -ex + 1u]);
                                              CapSense_CSD_posFiltersData[posIndex+1u]=CapSense_CSD_posFiltersData[posIn
             -dex];
                                              CapSense_CSD_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif /* (0u != (CapSense_CSD_AVERAGING_FILTER & \
                                             *           CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_CSD_IIR2_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MAS
             -K)) 
                                          if (0u != (posFiltersMask & CapSense_CSD_IIR2_FILTER)) 
                                          {
                                              position = CapSense_CSD_IIR2Filter(position,
                                                                                  (uint16)CapSense_CSD_posFiltersData[po
             -sIndex]);
                                              CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 23  

                                          }
                                      #endif /* (0u != (CapSense_CSD_IIR2_FILTER & \
                                             *          CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_CSD_IIR4_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MAS
             -K))
                                          if (0u != (posFiltersMask & CapSense_CSD_IIR4_FILTER))
                                          {
                                              position = CapSense_CSD_IIR4Filter(position,
                                                                                  (uint16)CapSense_CSD_posFiltersData[po
             -sIndex]);
                                              CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
                                          }                                
                                      #endif /* (0u != (CapSense_CSD_IIR4_FILTER & \
                                             *          CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_CSD_JITTER_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_M
             -ASK))
                                          if (0u != (posFiltersMask & CapSense_CSD_JITTER_FILTER))
                                          {
                                              position = CapSense_CSD_JitterFilter(position,
                                                                                  (uint16)CapSense_CSD_posFiltersData[po
             -sIndex]);
                                              CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_CSD_JITTER_FILTER & \
                                             *           CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
                                  }
                              }
                          #endif /* (0u != CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1364   2      
1365   2              }
1366   1              else
1367   1              {
1368   2                  /* The maximum wasn't found */
1369   2                  position = 0xFFFFu;
1370   2      
1371   2                  #if(0u != CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)
                              /* Reset the filters */
                              if(0u != (posFiltersMask & CapSense_CSD_ANY_POS_FILTER))
                              {
                                  CapSense_CSD_posFiltersData[firstTimeIndex] = 0u;
                              }
                          #endif /* (0u != CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1378   2              }
1379   1      
1380   1              
1381   1              return (position);
1382   1          }
1383          #endif /* (CapSense_CSD_TOTAL_LINEAR_SLIDERS_COUNT > 0u) */
1384          
1385          
1386          #if(CapSense_CSD_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
                  /*******************************************************************************
                  * Function Name: CapSense_CSD_GetRadialCentroidPos
                  ********************************************************************************
                  *
                  * Summary:
                  *  Checks the CapSense_CSD_Signal[ ] array for a centroid within
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 24  

                  *  slider specified range. The centroid position is calculated to the resolution
                  *  specified in the CapSense customizer. The position filters are applied to the
                  *  result if enabled.
                  *
                  * Parameters:
                  *  widget:  Widget number.
                  *  For every radial slider widget there are defines in this format:
                  *  #define CapSense_CSD_RS_"widget_name"            5
                  * 
                  * Return:
                  *  Returns position value of the radial slider.
                  *
                  * Side Effects:
                  *  If any sensor within the slider widget is active, the function returns values
                  *  from zero to the API resolution value set in the CapSense customizer. If no
                  *  sensors are active, the function returns 0xFFFF.
                  *  There are no checks of widget type argument provided to this function.
                  *  The unproper widget type provided will cause unexpected position calculations.
                  *
                  * Note:
                  *  If noise counts on the slider segments are greater than the noise
                  *  threshold, this subroutine may generate a false centroid result. The noise
                  *  threshold should be set carefully (high enough above the noise level) so 
                  *  that noise will not generate a false centroid.
                  *
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                   uint16 CapSense_CSD_GetRadialCentroidPos(uint8 widget)
                                                             
                  {
                      #if (0u != CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)
                          uint8 posIndex;
                          uint8 firstTimeIndex = CapSense_CSD_posFiltersData[widget];
                          uint8 posFiltersMask = CapSense_CSD_posFiltersMask[widget]; 
                      #endif /* (0u != CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK) */
              
                      #if ((0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
                           (0u != (CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)))
                          uint8 tempPos;
                      #endif /* ((0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)) || 
             -\
                             *   (0u != (CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)))
                             */
              
                      uint8 maximum;
                      uint16 position;
                      uint8 offset = CapSense_CSD_rawDataIndex[widget];
                      uint8 count = CapSense_CSD_numberOfSensors[widget];
                      
                      /* Find Maximum within centroid */        
                      #if (CapSense_CSD_IS_DIPLEX_SLIDER)
                          maximum = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget], 0u);
                      #else
                          maximum = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget]);
                      #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
                      
                      if (maximum != 0xFFu)
                      {
                          /* Calculate centroid */
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 25  

                          position = (uint16) CapSense_CSD_CalcCentroid(maximum, 
                                       offset, count, CapSense_CSD_centroidMult[widget], CapSense_CSD_noiseThreshold[wid
             -get]);
              
                          #if (0u != CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)
                              /* Check if this Radial slider has enabled filters */
                              if (0u != (posFiltersMask & CapSense_CSD_ANY_POS_FILTER))
                              {
                                  /* Caluclate position to store filters data */
                                  posIndex  = firstTimeIndex + 1u;
                                  
                                  if (0u == CapSense_CSD_posFiltersData[firstTimeIndex])
                                  {
                                      /* Init filters */
                                      CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
                                      #if ((0u != (CapSense_CSD_MEDIAN_FILTER & \
                                                   CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
                                           (0u != (CapSense_CSD_AVERAGING_FILTER & \
                                                   CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)))
              
                                          if ( (0u != (posFiltersMask & CapSense_CSD_MEDIAN_FILTER))  || 
                                               (0u != (posFiltersMask & CapSense_CSD_AVERAGING_FILTER)) )
                                          {
                                              CapSense_CSD_posFiltersData[posIndex + 1u] = (uint8) position;
                                          }
                                      #endif /* ((0u != (CapSense_CSD_MEDIAN_FILTER & \
                                             *           CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
                                             *   (0u != (CapSense_CSD_AVERAGING_FILTER & \
                                             *           CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)))
                                             */
                                      
                                      CapSense_CSD_posFiltersData[firstTimeIndex] = 1u;
                                  }
                                  else
                                  {
                                      /* Do filtering */
                                      #if (0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_M
             -ASK))
                                          if (0u != (posFiltersMask & CapSense_CSD_MEDIAN_FILTER))
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_CSD_MedianFilter(position,
                                                                                      CapSense_CSD_posFiltersData[posInd
             -ex],
                                                                                      CapSense_CSD_posFiltersData[posInd
             -ex + 1u]);
                                              CapSense_CSD_posFiltersData[posIndex + 1u] = 
                                                                                            CapSense_CSD_posFiltersData[
             -posIndex];
                                              CapSense_CSD_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif /* (0u != (CapSense_CSD_MEDIAN_FILTER & 
                                             *          CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_CSD_AVERAGING_FILTER & \
                                                  CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_CSD_AVERAGING_FILTER))
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_CSD_AveragingFilter(position, 
                                                                                     CapSense_CSD_posFiltersData[posInde
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 26  

             -x],
                                                                                     CapSense_CSD_posFiltersData[posInde
             -x + 1u]);
                                              CapSense_CSD_posFiltersData[posIndex+1u]= CapSense_CSD_posFiltersData[posI
             -ndex];
                                              CapSense_CSD_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif /* (0u != (CapSense_CSD_AVERAGING_FILTER & \
                                             *          CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_CSD_IIR2_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MAS
             -K))
                                          if (0u != (posFiltersMask & CapSense_CSD_IIR2_FILTER))
                                          {
                                              position = CapSense_CSD_IIR2Filter(position,
                                                                                  (uint16)CapSense_CSD_posFiltersData[po
             -sIndex]);
                                              CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_CSD_IIR2_FILTER & 
                                             *          CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_CSD_IIR4_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MAS
             -K))
                                          if (0u != (posFiltersMask & CapSense_CSD_IIR4_FILTER))
                                          {
                                              position = CapSense_CSD_IIR4Filter(position,
                                                                                  (uint16)CapSense_CSD_posFiltersData[po
             -sIndex]);
                                              CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_CSD_IIR4_FILTER & 
                                             *          CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_CSD_JITTER_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_M
             -ASK))
                                          if (0u != (posFiltersMask & CapSense_CSD_JITTER_FILTER))
                                          {
                                              position = CapSense_CSD_JitterFilter(position, 
                                                                                       CapSense_CSD_posFiltersData[posIn
             -dex]);
                                              CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_CSD_JITTER_FILTER &
                                             *           CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
                                  }
                              }
                          #endif /* (0u != CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK) */
              
                      }
                      else
                      {
                          /* The maximum didn't find */
                          position = 0xFFFFu;
              
                          #if (0u != CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)
                              /* Reset the filters */
                              if((posFiltersMask & CapSense_CSD_ANY_POS_FILTER) != 0u)
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 27  

                              {
                                  CapSense_CSD_posFiltersData[firstTimeIndex] = 0u;
                              }
                          #endif /* (0u != CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK) */
                      }
                      
                      return (position);
                  }
              #endif
1573          
1574          
1575          #if(CapSense_CSD_TOTAL_TOUCH_PADS_COUNT > 0u)
                  /*******************************************************************************
                  * Function Name: CapSense_CSD_GetTouchCentroidPos
                  ********************************************************************************
                  *
                  * Summary:
                  *  If a finger is present on touch pad, this function calculates the X and Y
                  *  position of the finger by calculating the centroids within touch pad specified
                  *  range. The X and Y positions are calculated to the API resolutions set in the
                  *  CapSense customizer. Returns a 1 if a finger is on the touchpad.
                  *  The position filter is applied to the result if enabled.
                  *  This function is available only if a touch pad is defined by the CapSense
                  *  customizer.
                  *
                  * Parameters:
                  *  widget:  Widget number. 
                  *  For every touchpad widget there are defines in this format:
                  *  #define CapSense_CSD_TP_"widget_name"            5
                  *
                  *  pos:     Pointer to the array of two uint16 elements, where result
                  *  result of calculation of X and Y position are stored.
                  *  pos[0u]  - position of X
                  *  pos[1u]  - position of Y
                  *
                  * Return:
                  *  Returns a 1 if a finger is on the touch pad, 0 - if not.
                  *
                  * Side Effects:
                  *   There are no checks of widget type argument provided to this function.
                  *   The unproper widget type provided will cause unexpected position
                  *   calculations.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  uint8 CapSense_CSD_GetTouchCentroidPos(uint8 widget, uint16* pos)
                                                          
                  {
                      #if (0u != CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)
                          uint8 posXIndex;
                          uint8 posYIndex;
                          uint8 firstTimeIndex = CapSense_CSD_posFiltersData[widget];
                          uint8 posFiltersMask = CapSense_CSD_posFiltersMask[widget];
                      #endif /* (0u != CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK) */
              
                      #if ((0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)) || \
                           (0u != (CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)))
                          uint16 tempPos;
                      #endif /* ((0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)) || \
                             *   (0u != (CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)))
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 28  

                             */
              
                      uint8 maxX;
                      uint8 maxY;
                      uint8 posX;
                      uint8 posY;
                      uint8 touch = 0u;
                      uint8 offset = CapSense_CSD_rawDataIndex[widget];
                      uint8 count = CapSense_CSD_numberOfSensors[widget];
                      
                      /* Find Maximum within X centroid */
                      #if (CapSense_CSD_IS_DIPLEX_SLIDER)
                          maxX = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget], 0u);
                      #else
                          maxX = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget]);
                      #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
              
                      if (maxX != 0xFFu)
                      {
                          offset = CapSense_CSD_rawDataIndex[widget + 1u];
                          count = CapSense_CSD_numberOfSensors[widget + 1u];
              
                          /* Find Maximum within Y centroid */
                          #if (CapSense_CSD_IS_DIPLEX_SLIDER)
                              maxY = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget + 1u], 
             -0u);
                          #else
                              maxY = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget + 1u]);
                          #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
              
                          if (maxY != 0xFFu)
                          {
                              /* X and Y maximums are found = true touch */
                              touch = 1u;
                              
                              /* Calculate Y centroid */
                              posY = CapSense_CSD_CalcCentroid(maxY, offset, count, 
                                          CapSense_CSD_centroidMult[widget + 1u], CapSense_CSD_noiseThreshold[widget + 1
             -u]);
                              
                              /* Calculate X centroid */
                              offset = CapSense_CSD_rawDataIndex[widget];
                              count = CapSense_CSD_numberOfSensors[widget];
                              
                              posX = CapSense_CSD_CalcCentroid(maxX, offset, count, 
                                          CapSense_CSD_centroidMult[widget],CapSense_CSD_noiseThreshold[widget]);
                  
                              #if (0u != CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)
                                  /* Check if this TP has enabled filters */
                                  if (0u != (posFiltersMask & CapSense_CSD_ANY_POS_FILTER))
                                  {
                                      /* Caluclate position to store filters data */
                                      posXIndex  = firstTimeIndex + 1u;
                                      posYIndex  = CapSense_CSD_posFiltersData[widget + 1u];
                                      
                                      if (0u == CapSense_CSD_posFiltersData[firstTimeIndex])
                                      {
                                          /* Init filters */
                                          CapSense_CSD_posFiltersData[posXIndex] = posX;
                                          CapSense_CSD_posFiltersData[posYIndex] = posY;
              
                                          #if((0u != (CapSense_CSD_MEDIAN_FILTER & \
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 29  

                                                      CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK))|| \
                                              (0u != (CapSense_CSD_AVERAGING_FILTER & \
                                                      CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)))
              
                                              if ( (0u != (posFiltersMask & CapSense_CSD_MEDIAN_FILTER)) || 
                                                   (0u != (posFiltersMask & CapSense_CSD_AVERAGING_FILTER)) )
                                              {
                                                  CapSense_CSD_posFiltersData[posXIndex + 1u] = posX;
                                                  CapSense_CSD_posFiltersData[posYIndex + 1u] = posY;
                                              }
                                          #endif /* ((0u != (CapSense_CSD_MEDIAN_FILTER & \
                                                 *           CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)) || \
                                                 *    (0u != (CapSense_CSD_AVERAGING_FILTER & \
                                                 *            CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)))
                                                 */
                                          
                                          CapSense_CSD_posFiltersData[firstTimeIndex] = 1u;
                                      }
                                      else
                                      {
                                          /* Do filtering */
                                          #if (0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_M
             -ASK))
                                              if (0u != (posFiltersMask & CapSense_CSD_MEDIAN_FILTER))
                                              {
                                                  tempPos = posX;
                                                  posX = (uint8) CapSense_CSD_MedianFilter(posX,
                                                                                    CapSense_CSD_posFiltersData[posXInde
             -x],
                                                                                    CapSense_CSD_posFiltersData[posXInde
             -x + 1u]);
                                                  CapSense_CSD_posFiltersData[posXIndex + 1u] = 
                                                                                           CapSense_CSD_posFiltersData[p
             -osXIndex];
                                                  CapSense_CSD_posFiltersData[posXIndex] = tempPos;
                                                  
                                                  tempPos = posY;
                                                  posY = (uint8) CapSense_CSD_MedianFilter(posY,
                                                                                     CapSense_CSD_posFiltersData[posYInd
             -ex], 
                                                                                     CapSense_CSD_posFiltersData[posYInd
             -ex + 1u]);
                                                  CapSense_CSD_posFiltersData[posYIndex + 1u] = 
                                                                                           CapSense_CSD_posFiltersData[p
             -osYIndex];
                                                  CapSense_CSD_posFiltersData[posYIndex] = tempPos;
                                              }
                                              
                                          #endif /* (0u != (CapSense_CSD_MEDIAN_FILTER & \
                                                 *          CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
              
                                          #if(0u !=(CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_
             -MASK))
                                              if (0u != (posFiltersMask & CapSense_CSD_AVERAGING_FILTER))
                                              {
                                                  tempPos = posX;
                                                  posX = (uint8) CapSense_CSD_AveragingFilter(posX,
                                                                                     CapSense_CSD_posFiltersData[posXInd
             -ex], 
                                                                                     CapSense_CSD_posFiltersData[posXInd
             -ex + 1u]);
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 30  

                                                  CapSense_CSD_posFiltersData[posXIndex + 1u] = 
                                                                                           CapSense_CSD_posFiltersData[p
             -osXIndex];
                                                  CapSense_CSD_posFiltersData[posXIndex] = tempPos;
                                                  
                                                  tempPos = posY;
                                                  posY = (uint8) CapSense_CSD_AveragingFilter(posY, 
                                                                                    CapSense_CSD_posFiltersData[posYInde
             -x], 
                                                                                    CapSense_CSD_posFiltersData[posYInde
             -x + 1u]);
                                                  CapSense_CSD_posFiltersData[posYIndex + 1u] = 
                                                                                          CapSense_CSD_posFiltersData[po
             -sYIndex];
                                                  CapSense_CSD_posFiltersData[posYIndex] = tempPos;
                                              }
              
                                          #endif /* (0u != (CapSense_CSD_AVERAGING_FILTER & \
                                                 *           CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
              
                                          #if (0u != (CapSense_CSD_IIR2_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_MAS
             -K))
                                              if (0u != (posFiltersMask & CapSense_CSD_IIR2_FILTER))
                                              {
                                                  posX = (uint8) CapSense_CSD_IIR2Filter(posX, 
                                                                                         CapSense_CSD_posFiltersData[pos
             -XIndex]);
                                                  CapSense_CSD_posFiltersData[posXIndex] = posX;
                                                  
                                                  posY = (uint8) CapSense_CSD_IIR2Filter(posY, 
                                                                                          CapSense_CSD_posFiltersData[po
             -sYIndex]);
                                                  CapSense_CSD_posFiltersData[posYIndex] = posY;
                                              }
                                              
                                          #endif /* (0u != (CapSense_CSD_IIR2_FILTER & \
                                                 *          CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
              
                                          #if (0u != (CapSense_CSD_IIR4_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_MAS
             -K))
                                              if (0u != (posFiltersMask & CapSense_CSD_IIR4_FILTER))
                                              {
                                                  posX = (uint8) CapSense_CSD_IIR4Filter((uint16)posX,
                                                                                  (uint16)CapSense_CSD_posFiltersData[po
             -sXIndex]);
                                                  CapSense_CSD_posFiltersData[posXIndex] = posX;
              
                                                  posY = (uint8) CapSense_CSD_IIR4Filter((uint16)posY,
                                                                                  (uint16)CapSense_CSD_posFiltersData[po
             -sYIndex]);
                                                  CapSense_CSD_posFiltersData[posYIndex] = posY;
                                              }
                                              
                                          #endif /* (0u != (CapSense_CSD_IIR4_FILTER & \
                                                 *           CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
              
                                          #if (0u != (CapSense_CSD_JITTER_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_M
             -ASK))
                                              if (0u != (posFiltersMask & CapSense_CSD_JITTER_FILTER))
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 31  

                                                  {
                                                      posX = (uint8) CapSense_CSD_JitterFilter(posX, 
                                                                                          CapSense_CSD_posFiltersData[po
             -sXIndex]);
                                                      CapSense_CSD_posFiltersData[posXIndex] = posX;
                                                      
                                                      posY = (uint8) CapSense_CSD_JitterFilter(posY, 
                                                                                          CapSense_CSD_posFiltersData[po
             -sYIndex]);
                                                      CapSense_CSD_posFiltersData[posYIndex] = posY;
                                                  }
                                          #endif /* (0u != (CapSense_CSD_JITTER_FILTER & \
                                                 *           CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
                                      }
                                  }
                              #endif /* (0u != CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK) */
              
                              /* Save positions */
                              pos[0u] = posX;
                              pos[1u] = posY;
                          }
                      }
              
                      #if (0u != CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)
                          if(touch == 0u)
                          {
                              /* Reset the filters */
                              if ((posFiltersMask & CapSense_CSD_ANY_POS_FILTER) != 0u)
                              {
                                  CapSense_CSD_posFiltersData[firstTimeIndex] = 0u;
                              }
                          }
                      #endif /* (0u != CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK) */
                      
                      return (touch);
                  }
              #endif /* (CapSense_CSD_TOTAL_TOUCH_PADS_COUNT > 0u) */
1825          
1826          
1827          #if ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) | \
1828                (CapSense_CSD_POS_FILTERS_MASK & CapSense_CSD_MEDIAN_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_CSD_MedianFilter
                  ********************************************************************************
                  *
                  * Summary:
                  *  Median filter function. 
                  *  The median filter looks at the three most recent samples and reports the 
                  *  median value.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *  x3:  Before previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_CSD_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
                                                       
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 32  

                  {
                      uint16 tmp;
                      
                      if (x1 > x2)
                      {
                          tmp = x2;
                          x2 = x1;
                          x1 = tmp;
                      }
                      
                      if (x2 > x3)
                      {
                          x2 = x3;
                      }
                      
                      return ((x1 > x2) ? x1 : x2);
                  }
              #endif /* ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) | \
                     *    (CapSense_CSD_POS_FILTERS_MASK & CapSense_CSD_MEDIAN_FILTER) )
                     */
1869          
1870          
1871          #if ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_AVERAGING_FILTER) | \
1872                (CapSense_CSD_POS_FILTERS_MASK & CapSense_CSD_AVERAGING_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_CSD_AveragingFilter
                  ********************************************************************************
                  *
                  * Summary:
                  *  Averaging filter function.
                  *  The averaging filter looks at the three most recent samples of position and
                  *  reports the averaging value.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *  x3:  Before previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_CSD_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
                                                          
                  {
                      uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
                      
                      return ((uint16) tmp);
                  }
              #endif /* ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_AVERAGING_FILTER) | \
                     *    (CapSense_CSD_POS_FILTERS_MASK & CapSense_CSD_AVERAGING_FILTER) )
                     */
1901          
1902          
1903          #if ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR2_FILTER) | \
1904                (CapSense_CSD_POS_FILTERS_MASK & CapSense_CSD_IIR2_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_CSD_IIR2Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 33  

                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_CSD_IIR2Filter(uint16 x1, uint16 x2)
                                                     
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/2 Current Value+ 1/2 Previous Value */
                      tmp = (uint32)x1 + (uint32)x2;
                      tmp >>= 1u;
                  
                      return ((uint16) tmp);
                  }
              #endif /* ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR2_FILTER) | \
                     *    (CapSense_CSD_POS_FILTERS_MASK & CapSense_CSD_IIR2_FILTER) )
                     */
1934          
1935          
1936          #if ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR4_FILTER) | \
1937                (CapSense_CSD_POS_FILTERS_MASK & CapSense_CSD_IIR4_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_CSD_IIR4Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_CSD_IIR4Filter(uint16 x1, uint16 x2)
                                                     
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/4 Current Value + 3/4 Previous Value */
                      tmp = (uint32)x1 + (uint32)x2;
                      tmp += ((uint32)x2 << 1u);
                      tmp >>= 2u;
                      
                      return ((uint16) tmp);
                  }
              #endif /* ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR4_FILTER) | \
                     *    (CapSense_CSD_POS_FILTERS_MASK & CapSense_CSD_IIR4_FILTER) )
                     */
1968          
1969          
1970          #if ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_JITTER_FILTER) | \
1971                (CapSense_CSD_POS_FILTERS_MASK & CapSense_CSD_JITTER_FILTER) )
                  /*******************************************************************************
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 34  

                  * Function Name: uint16 CapSense_CSD_JitterFilter
                  ********************************************************************************
                  *
                  * Summary:
                  *  Jitter filter function.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_CSD_JitterFilter(uint16 x1, uint16 x2)
                                                       
                  {
                      if (x1 > x2)
                      {
                          x1--;
                      }
                      else
                      {
                          if (x1 < x2)
                          {
                              x1++;
                          }
                      }
                  
                      return x1;
                  }
              #endif /* ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_JITTER_FILTER) | \
                     *    (CapSense_CSD_POS_FILTERS_MASK & CapSense_CSD_JITTER_FILTER) )
                     */
2007          
2008          
2009          #if (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR8_FILTER)
                  /*******************************************************************************
                  * Function Name: CapSense_CSD_IIR8Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/8 filter function. IIR1/8 = 1/8current + 7/8previous.
                  *  Only applies for raw data.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_CSD_IIR8Filter(uint16 x1, uint16 x2)
                                                     
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/8 Current Value + 7/8 Previous Value */
                      tmp = (uint32)x1;
                      tmp += (((uint32)x2 << 3u) - ((uint32)x2));
                      tmp >>= 3u;
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 35  

                  
                      return ((uint16) tmp);
                  }
              #endif /* (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR8_FILTER) */
2039          
2040          
2041          #if (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR16_FILTER)
                  /*******************************************************************************
                  * Function Name: CapSense_CSD_IIR16Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/16 filter function. IIR1/16 = 1/16current + 15/16previous.
                  *  Only applies for raw data.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_CSD_IIR16Filter(uint16 x1, uint16 x2)
                                                      
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/16 Current Value + 15/16 Previous Value */
                      tmp = (uint32)x1;
                      tmp += (((uint32)x2 << 4u) - ((uint32)x2));
                      tmp >>= 4u;
                      
                      return ((uint16) tmp);
                  }
              #endif /* (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR16_FILTER) */
2071          
2072          
2073          #if (CapSense_CSD_TOTAL_MATRIX_BUTTONS_COUNT)
              
                  /*******************************************************************************
                  * Function Name: CapSense_CSD_GetMatrixButtonPos
                  ********************************************************************************
                  *
                  * Summary:
                  *  Function calculates and returns touch position (column and row) for matrix
                  *  button widget.
                  *
                  * Parameters:
                  *  widget:  widget number;
                  *  pos:     pointer to an array of two uint8, where touch postion will be 
                  *           stored:
                  *           pos[0] - column position;
                  *           pos[1] - raw position.
                  *
                  * Return:
                  *  Returns 1 if row and column sensors of matrix button are active, 0 - in other
                  *  cases.
                  *
                  * Reentrant:
                  *  No
                  *
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 36  

                  *******************************************************************************/
                  uint8 CapSense_CSD_GetMatrixButtonPos(uint8 widget, uint8* pos)
                                                                
                  {
                      uint8 i;
                      uint8 retVal = 0u;
                      uint16 row_sig_max = 0u;
                      uint16 col_sig_max = 0u;
                      uint8 row_ind = 0u;
                      uint8 col_ind = 0u;
              
                      if (0u != CapSense_CSD_CheckIsWidgetActive(widget))
                      {
                          /* Find row number with maximal signal value */
                          for(i = CapSense_CSD_rawDataIndex[widget]; i < (CapSense_CSD_rawDataIndex[widget] + \
                               CapSense_CSD_numberOfSensors[widget]); i++)
                          {
                              if (CapSense_CSD_sensorSignal[i] > col_sig_max)
                              {
                                  col_ind = i;
                                  col_sig_max = CapSense_CSD_sensorSignal[i];
                              }
                          }
              
                          /* Find row number with maximal signal value */
                          for(i = CapSense_CSD_rawDataIndex[widget+1u]; i < (CapSense_CSD_rawDataIndex[widget+1u] + \
                               CapSense_CSD_numberOfSensors[widget+1u]); i++)
                          {
                              if (CapSense_CSD_sensorSignal[i] > row_sig_max)
                              {
                                  row_ind = i;
                                  row_sig_max = CapSense_CSD_sensorSignal[i];
                              }
                          }
              
                          if((col_sig_max >= CapSense_CSD_fingerThreshold[widget]) && \
                             (row_sig_max >= CapSense_CSD_fingerThreshold[widget+1u]))
                          {
                              pos[0u] = col_ind - CapSense_CSD_rawDataIndex[widget];
                              pos[1u] = row_ind - CapSense_CSD_rawDataIndex[widget+1u];
                              retVal = 1u;
                          }
                      }
                      return (retVal);
                  }
              
              #endif /* (CapSense_CSD_TOTAL_MATRIX_BUTTONS_COUNT) */
2144          
2145          /* [] END OF FILE */
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 37  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CapSense_CSD_BaseInit (BEGIN)
                                           ; SOURCE LINE # 129
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 133
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      E     MOV     DPTR,#CapSense_CSD_widgetNumber
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#widget
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
0015 900000      R     MOV     DPTR,#sensor
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 25E0              ADD     A,ACC
001D 2400        E     ADD     A,#LOW CapSense_CSD_sensorRaw
001F F582              MOV     DPL,A
0021 E4                CLR     A
0022 3400        E     ADDC    A,#HIGH CapSense_CSD_sensorRaw
0024 F583              MOV     DPH,A
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 900000      R     MOV     DPTR,#sensor
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 ED                MOV     A,R5
0031 25E0              ADD     A,ACC
0033 2400        R     ADD     A,#LOW CapSense_CSD_sensorBaseline
0035 F582              MOV     DPL,A
0037 E4                CLR     A
0038 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorBaseline
003A F583              MOV     DPH,A
003C EE                MOV     A,R6
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
0041 900000      R     MOV     DPTR,#sensor
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 7400        R     MOV     A,#LOW CapSense_CSD_sensorBaselineLow
0048 2F                ADD     A,R7
0049 F582              MOV     DPL,A
004B E4                CLR     A
004C 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorBaselineLow
004E F583              MOV     DPH,A
0050 E4                CLR     A
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 38  

0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
0052 900000      R     MOV     DPTR,#sensor
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 EF                MOV     A,R7
0058 25E0              ADD     A,ACC
005A 2400        R     ADD     A,#LOW CapSense_CSD_sensorSignal
005C F582              MOV     DPL,A
005E E4                CLR     A
005F 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorSignal
0061 F583              MOV     DPH,A
0063 E4                CLR     A
0064 F0                MOVX    @DPTR,A
0065 A3                INC     DPTR
0066 E4                CLR     A
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
0068 900000      R     MOV     DPTR,#widget
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D EF                MOV     A,R7
006E D3                SETB    C
006F 9400              SUBB    A,#00H
0071 401C              JC      ?C0002
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
0073 900000      R     MOV     DPTR,#widget
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 EF                MOV     A,R7
0079 900000      R     MOV     DPTR,#CapSense_CSD_debounce
007C 93                MOVC    A,@A+DPTR
007D FF                MOV     R7,A
007E 900000      R     MOV     DPTR,#widget
0081 E0                MOVX    A,@DPTR
0082 FE                MOV     R6,A
0083 7400        R     MOV     A,#LOW CapSense_CSD_debounceCounter+0FFFFH
0085 2E                ADD     A,R6
0086 F582              MOV     DPL,A
0088 E4                CLR     A
0089 3400        R     ADDC    A,#HIGH CapSense_CSD_debounceCounter+0FFFFH
008B F583              MOV     DPH,A
008D EF                MOV     A,R7
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
008F         ?C0001:
                                           ; SOURCE LINE # 181
008F         ?C0002:
008F 22                RET     
             ; FUNCTION _CapSense_CSD_BaseInit (END)

             ; FUNCTION _CapSense_CSD_InitializeSensorBaseline (BEGIN)
                                           ; SOURCE LINE # 205
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 209
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 39  

000A 120000      E     LCALL   _CapSense_CSD_ScanSensor
000D         ?C0003:
                                           ; SOURCE LINE # 210
000D 120000      E     LCALL   _?CapSense_CSD_IsBusy
0010 EF                MOV     A,R7
0011 70FA              JNZ     ?C0003
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 213
0013         ?C0004:
                                           ; SOURCE LINE # 217
0013 900000      R     MOV     DPTR,#sensor
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 120000      R     LCALL   _CapSense_CSD_BaseInit
                                           ; SOURCE LINE # 234
001B         ?C0005:
001B 22                RET     
             ; FUNCTION _CapSense_CSD_InitializeSensorBaseline (END)

             ; FUNCTION CapSense_CSD_InitializeAllBaselines (BEGIN)
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 263
0000 900000      R     MOV     DPTR,#i
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005         ?C0006:
0005 900000      R     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9407              SUBB    A,#07H
000E 5010              JNC     ?C0009
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
0010 900000      R     MOV     DPTR,#i
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 120000      R     LCALL   _CapSense_CSD_InitializeSensorBaseline
                                           ; SOURCE LINE # 266
0018         ?C0008:
0018 900000      R     MOV     DPTR,#i
001B E0                MOVX    A,@DPTR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
001E 80E5              SJMP    ?C0006
0020         ?C0007:
                                           ; SOURCE LINE # 267
0020         ?C0009:
0020 22                RET     
             ; FUNCTION CapSense_CSD_InitializeAllBaselines (END)

             ; FUNCTION CapSense_CSD_InitializeEnabledBaselines (BEGIN)
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 297
0000 120000      E     LCALL   CapSense_CSD_ScanEnabledWidgets
0003         ?C0010:
                                           ; SOURCE LINE # 298
0003 120000      E     LCALL   _?CapSense_CSD_IsBusy
0006 EF                MOV     A,R7
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 40  

0007 70FA              JNZ     ?C0010
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 301
0009         ?C0011:
                                           ; SOURCE LINE # 303
0009 900000      R     MOV     DPTR,#i
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
000E         ?C0012:
000E 900000      R     MOV     DPTR,#i
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 C3                CLR     C
0015 9407              SUBB    A,#07H
0017 506D              JNC     ?C0016
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
0019 900000      R     MOV     DPTR,#i
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 13                RRC     A
0020 13                RRC     A
0021 13                RRC     A
0022 541F              ANL     A,#01FH
0024 FF                MOV     R7,A
0025 900000      R     MOV     DPTR,#pos
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
002A 900000      R     MOV     DPTR,#i
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 5407              ANL     A,#07H
0032 FF                MOV     R7,A
0033 7401              MOV     A,#01H
0035 A807              MOV     R0,AR7
0037 08                INC     R0
0038 8002              SJMP    ?C0082
003A         ?C0081:
003A C3                CLR     C
003B 33                RLC     A
003C         ?C0082:
003C D8FC              DJNZ    R0,?C0081
003E FF                MOV     R7,A
003F 900000      R     MOV     DPTR,#enMask
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
0044 900000      R     MOV     DPTR,#pos
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 7400        E     MOV     A,#LOW CapSense_CSD_sensorEnableMask
004B 2F                ADD     A,R7
004C F582              MOV     DPL,A
004E E4                CLR     A
004F 3400        E     ADDC    A,#HIGH CapSense_CSD_sensorEnableMask
0051 F583              MOV     DPH,A
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 41  

0055 900000      R     MOV     DPTR,#enMask
0058 E0                MOVX    A,@DPTR
0059 FE                MOV     R6,A
005A EF                MOV     A,R7
005B 5E                ANL     A,R6
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E 7016              JNZ     ?C0015
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
0060 900000      R     MOV     DPTR,#i
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 25E0              ADD     A,ACC
0068 2400        E     ADD     A,#LOW CapSense_CSD_sensorRaw
006A F582              MOV     DPL,A
006C E4                CLR     A
006D 3400        E     ADDC    A,#HIGH CapSense_CSD_sensorRaw
006F F583              MOV     DPH,A
0071 E4                CLR     A
0072 F0                MOVX    @DPTR,A
0073 A3                INC     DPTR
0074 E4                CLR     A
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
0076         ?C0015:
                                           ; SOURCE LINE # 315
0076 900000      R     MOV     DPTR,#i
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B 120000      R     LCALL   _CapSense_CSD_BaseInit
                                           ; SOURCE LINE # 316
007E         ?C0014:
007E 900000      R     MOV     DPTR,#i
0081 E0                MOVX    A,@DPTR
0082 04                INC     A
0083 F0                MOVX    @DPTR,A
0084 8088              SJMP    ?C0012
0086         ?C0013:
                                           ; SOURCE LINE # 317
0086         ?C0016:
0086 22                RET     
             ; FUNCTION CapSense_CSD_InitializeEnabledBaselines (END)

             ; FUNCTION _CapSense_CSD_UpdateSensorBaseline (BEGIN)
                                           ; SOURCE LINE # 357
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 363
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      E     MOV     DPTR,#CapSense_CSD_widgetNumber
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#widget
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 42  

                                           ; SOURCE LINE # 364
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 25E0              ADD     A,ACC
001D 2400        R     ADD     A,#LOW CapSense_CSD_noiseThreshold
001F F582              MOV     DPL,A
0021 E4                CLR     A
0022 3400        R     ADDC    A,#HIGH CapSense_CSD_noiseThreshold
0024 F583              MOV     DPH,A
0026 E4                CLR     A
0027 93                MOVC    A,@A+DPTR
0028 FE                MOV     R6,A
0029 7401              MOV     A,#01H
002B 93                MOVC    A,@A+DPTR
002C FF                MOV     R7,A
002D 900000      R     MOV     DPTR,#noiseThreshold
0030 EE                MOV     A,R6
0031 F0                MOVX    @DPTR,A
0032 A3                INC     DPTR
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0035 900000      R     MOV     DPTR,#sensor
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 25E0              ADD     A,ACC
003D 2400        E     ADD     A,#LOW CapSense_CSD_sensorRaw
003F F582              MOV     DPL,A
0041 E4                CLR     A
0042 3400        E     ADDC    A,#HIGH CapSense_CSD_sensorRaw
0044 F583              MOV     DPH,A
0046 E0                MOVX    A,@DPTR
0047 FE                MOV     R6,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B 900000      R     MOV     DPTR,#filteredRawData
004E EE                MOV     A,R6
004F F0                MOVX    @DPTR,A
0050 A3                INC     DPTR
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0053 900000      R     MOV     DPTR,#sensor
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 EF                MOV     A,R7
0059 25E0              ADD     A,ACC
005B 2400        R     ADD     A,#LOW CapSense_CSD_sensorBaseline
005D F582              MOV     DPL,A
005F E4                CLR     A
0060 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorBaseline
0062 F583              MOV     DPH,A
0064 E0                MOVX    A,@DPTR
0065 FE                MOV     R6,A
0066 A3                INC     DPTR
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 900000      R     MOV     DPTR,#filteredRawData
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 43  

006C E0                MOVX    A,@DPTR
006D FC                MOV     R4,A
006E A3                INC     DPTR
006F E0                MOVX    A,@DPTR
0070 FD                MOV     R5,A
0071 C3                CLR     C
0072 ED                MOV     A,R5
0073 9F                SUBB    A,R7
0074 EC                MOV     A,R4
0075 9E                SUBB    A,R6
0076 4035              JC      ?C0017
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
0078 900000      R     MOV     DPTR,#sensor
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 25E0              ADD     A,ACC
0080 2400        R     ADD     A,#LOW CapSense_CSD_sensorBaseline
0082 F582              MOV     DPL,A
0084 E4                CLR     A
0085 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorBaseline
0087 F583              MOV     DPH,A
0089 E0                MOVX    A,@DPTR
008A FE                MOV     R6,A
008B A3                INC     DPTR
008C E0                MOVX    A,@DPTR
008D FF                MOV     R7,A
008E 900000      R     MOV     DPTR,#filteredRawData
0091 E0                MOVX    A,@DPTR
0092 FC                MOV     R4,A
0093 A3                INC     DPTR
0094 E0                MOVX    A,@DPTR
0095 FD                MOV     R5,A
0096 C3                CLR     C
0097 ED                MOV     A,R5
0098 9F                SUBB    A,R7
0099 FF                MOV     R7,A
009A EC                MOV     A,R4
009B 9E                SUBB    A,R6
009C FE                MOV     R6,A
009D 900000      R     MOV     DPTR,#tempRaw
00A0 EE                MOV     A,R6
00A1 F0                MOVX    @DPTR,A
00A2 A3                INC     DPTR
00A3 EF                MOV     A,R7
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
00A5 900000      R     MOV     DPTR,#widget
00A8 7401              MOV     A,#01H
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
00AB 8032              SJMP    ?C0018
00AD         ?C0017:
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
00AD 900000      R     MOV     DPTR,#sensor
00B0 E0                MOVX    A,@DPTR
00B1 FF                MOV     R7,A
00B2 EF                MOV     A,R7
00B3 25E0              ADD     A,ACC
00B5 2400        R     ADD     A,#LOW CapSense_CSD_sensorBaseline
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 44  

00B7 F582              MOV     DPL,A
00B9 E4                CLR     A
00BA 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorBaseline
00BC F583              MOV     DPH,A
00BE E0                MOVX    A,@DPTR
00BF FE                MOV     R6,A
00C0 A3                INC     DPTR
00C1 E0                MOVX    A,@DPTR
00C2 FF                MOV     R7,A
00C3 900000      R     MOV     DPTR,#filteredRawData
00C6 E0                MOVX    A,@DPTR
00C7 FC                MOV     R4,A
00C8 A3                INC     DPTR
00C9 E0                MOVX    A,@DPTR
00CA FD                MOV     R5,A
00CB C3                CLR     C
00CC EF                MOV     A,R7
00CD 9D                SUBB    A,R5
00CE FF                MOV     R7,A
00CF EE                MOV     A,R6
00D0 9C                SUBB    A,R4
00D1 FE                MOV     R6,A
00D2 900000      R     MOV     DPTR,#tempRaw
00D5 EE                MOV     A,R6
00D6 F0                MOVX    @DPTR,A
00D7 A3                INC     DPTR
00D8 EF                MOV     A,R7
00D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
00DA 900000      R     MOV     DPTR,#widget
00DD E4                CLR     A
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
00DF         ?C0018:
                                           ; SOURCE LINE # 430
00DF 900000      R     MOV     DPTR,#widget
00E2 E0                MOVX    A,@DPTR
00E3 FF                MOV     R7,A
00E4 EF                MOV     A,R7
00E5 7059              JNZ     ?C0019
00E7 900000      R     MOV     DPTR,#tempRaw
00EA E0                MOVX    A,@DPTR
00EB FE                MOV     R6,A
00EC A3                INC     DPTR
00ED E0                MOVX    A,@DPTR
00EE FF                MOV     R7,A
00EF D3                SETB    C
00F0 EF                MOV     A,R7
00F1 9414              SUBB    A,#014H
00F3 EE                MOV     A,R6
00F4 9400              SUBB    A,#00H
00F6 4048              JC      ?C0019
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 432
00F8 900000      R     MOV     DPTR,#sensor
00FB E0                MOVX    A,@DPTR
00FC FF                MOV     R7,A
00FD 7400        R     MOV     A,#LOW CapSense_CSD_lowBaselineResetCnt
00FF 2F                ADD     A,R7
0100 F582              MOV     DPL,A
0102 E4                CLR     A
0103 3400        R     ADDC    A,#HIGH CapSense_CSD_lowBaselineResetCnt
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 45  

0105 F583              MOV     DPH,A
0107 E0                MOVX    A,@DPTR
0108 FF                MOV     R7,A
0109 EF                MOV     A,R7
010A C3                CLR     C
010B 9405              SUBB    A,#05H
010D 401C              JC      ?C0020
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
010F 900000      R     MOV     DPTR,#sensor
0112 E0                MOVX    A,@DPTR
0113 FF                MOV     R7,A
0114 120000      R     LCALL   _CapSense_CSD_BaseInit
                                           ; SOURCE LINE # 435
0117 900000      R     MOV     DPTR,#sensor
011A E0                MOVX    A,@DPTR
011B FF                MOV     R7,A
011C 7400        R     MOV     A,#LOW CapSense_CSD_lowBaselineResetCnt
011E 2F                ADD     A,R7
011F F582              MOV     DPL,A
0121 E4                CLR     A
0122 3400        R     ADDC    A,#HIGH CapSense_CSD_lowBaselineResetCnt
0124 F583              MOV     DPH,A
0126 E4                CLR     A
0127 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
0128 020000      R     LJMP    ?C0022
012B         ?C0020:
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
012B 900000      R     MOV     DPTR,#sensor
012E E0                MOVX    A,@DPTR
012F FF                MOV     R7,A
0130 7400        R     MOV     A,#LOW CapSense_CSD_lowBaselineResetCnt
0132 2F                ADD     A,R7
0133 F582              MOV     DPL,A
0135 E4                CLR     A
0136 3400        R     ADDC    A,#HIGH CapSense_CSD_lowBaselineResetCnt
0138 F583              MOV     DPH,A
013A E0                MOVX    A,@DPTR
013B 04                INC     A
013C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
013D         ?C0021:
                                           ; SOURCE LINE # 441
013D 020000      R     LJMP    ?C0022
0140         ?C0019:
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 447
0140 900000      R     MOV     DPTR,#noiseThreshold
0143 E0                MOVX    A,@DPTR
0144 FE                MOV     R6,A
0145 A3                INC     DPTR
0146 E0                MOVX    A,@DPTR
0147 FF                MOV     R7,A
0148 900000      R     MOV     DPTR,#tempRaw
014B E0                MOVX    A,@DPTR
014C FC                MOV     R4,A
014D A3                INC     DPTR
014E E0                MOVX    A,@DPTR
014F FD                MOV     R5,A
0150 D3                SETB    C
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 46  

0151 ED                MOV     A,R5
0152 9F                SUBB    A,R7
0153 EC                MOV     A,R4
0154 9E                SUBB    A,R6
0155 401F              JC      ?C0024
0157 900000      R     MOV     DPTR,#tempRaw
015A E0                MOVX    A,@DPTR
015B FE                MOV     R6,A
015C A3                INC     DPTR
015D E0                MOVX    A,@DPTR
015E FF                MOV     R7,A
015F C3                CLR     C
0160 EF                MOV     A,R7
0161 9414              SUBB    A,#014H
0163 EE                MOV     A,R6
0164 9400              SUBB    A,#00H
0166 4003              JC      $ + 5H
0168 020000      R     LJMP    ?C0022
016B 900000      R     MOV     DPTR,#widget
016E E0                MOVX    A,@DPTR
016F FF                MOV     R7,A
0170 EF                MOV     A,R7
0171 6003              JZ      $ + 5H
0173 020000      R     LJMP    ?C0022
0176         ?C0024:
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 452
0176 900000      R     MOV     DPTR,#sensor
0179 E0                MOVX    A,@DPTR
017A FF                MOV     R7,A
017B EF                MOV     A,R7
017C 25E0              ADD     A,ACC
017E 2400        R     ADD     A,#LOW CapSense_CSD_sensorBaseline
0180 F582              MOV     DPL,A
0182 E4                CLR     A
0183 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorBaseline
0185 F583              MOV     DPH,A
0187 E0                MOVX    A,@DPTR
0188 FE                MOV     R6,A
0189 A3                INC     DPTR
018A E0                MOVX    A,@DPTR
018B FF                MOV     R7,A
018C E4                CLR     A
018D FC                MOV     R4,A
018E FD                MOV     R5,A
018F 7808              MOV     R0,#08H
0191 120000      E     LCALL   ?C?LSHL
0194 900000      R     MOV     DPTR,#calc
0197 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 453
019A 900000      R     MOV     DPTR,#calc
019D 120000      E     LCALL   ?C?LLDXDATA0
01A0 900000      R     MOV     DPTR,#sensor
01A3 E0                MOVX    A,@DPTR
01A4 FF                MOV     R7,A
01A5 7400        R     MOV     A,#LOW CapSense_CSD_sensorBaselineLow
01A7 2F                ADD     A,R7
01A8 F582              MOV     DPL,A
01AA E4                CLR     A
01AB 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorBaselineLow
01AD F583              MOV     DPH,A
01AF E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 47  

01B0 FF                MOV     R7,A
01B1 E4                CLR     A
01B2 FC                MOV     R4,A
01B3 FD                MOV     R5,A
01B4 FE                MOV     R6,A
01B5 120000      E     LCALL   ?C?LOR
01B8 900000      R     MOV     DPTR,#calc
01BB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 456
01BE 900000      R     MOV     DPTR,#calc
01C1 120000      E     LCALL   ?C?LLDXDATA0
01C4 900000      R     MOV     DPTR,#filteredRawData
01C7 E0                MOVX    A,@DPTR
01C8 FE                MOV     R6,A
01C9 A3                INC     DPTR
01CA E0                MOVX    A,@DPTR
01CB FF                MOV     R7,A
01CC E4                CLR     A
01CD FC                MOV     R4,A
01CE FD                MOV     R5,A
01CF 120000      E     LCALL   ?C?LADD
01D2 900000      R     MOV     DPTR,#calc
01D5 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 459
01D8 900000      R     MOV     DPTR,#calc
01DB 120000      E     LCALL   ?C?LLDXDATA
01DE C004              PUSH    AR4
01E0 C005              PUSH    AR5
01E2 C006              PUSH    AR6
01E4 C007              PUSH    AR7
01E6 900000      R     MOV     DPTR,#sensor
01E9 E0                MOVX    A,@DPTR
01EA FF                MOV     R7,A
01EB EF                MOV     A,R7
01EC 25E0              ADD     A,ACC
01EE 2400        R     ADD     A,#LOW CapSense_CSD_sensorBaseline
01F0 F582              MOV     DPL,A
01F2 E4                CLR     A
01F3 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorBaseline
01F5 F583              MOV     DPH,A
01F7 E0                MOVX    A,@DPTR
01F8 FE                MOV     R6,A
01F9 A3                INC     DPTR
01FA E0                MOVX    A,@DPTR
01FB FF                MOV     R7,A
01FC AB07              MOV     R3,AR7
01FE AA06              MOV     R2,AR6
0200 E4                CLR     A
0201 F9                MOV     R1,A
0202 F8                MOV     R0,A
0203 D007              POP     AR7
0205 D006              POP     AR6
0207 D005              POP     AR5
0209 D004              POP     AR4
020B 120000      E     LCALL   ?C?LSUB
020E 900000      R     MOV     DPTR,#calc
0211 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 462
0214 900000      R     MOV     DPTR,#calc
0217 120000      E     LCALL   ?C?LLDXDATA
021A 7808              MOV     R0,#08H
021C 120000      E     LCALL   ?C?ULSHR
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 48  

021F 900000      R     MOV     DPTR,#sensor
0222 E0                MOVX    A,@DPTR
0223 FD                MOV     R5,A
0224 ED                MOV     A,R5
0225 25E0              ADD     A,ACC
0227 2400        R     ADD     A,#LOW CapSense_CSD_sensorBaseline
0229 F582              MOV     DPL,A
022B E4                CLR     A
022C 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorBaseline
022E F583              MOV     DPH,A
0230 EE                MOV     A,R6
0231 F0                MOVX    @DPTR,A
0232 A3                INC     DPTR
0233 EF                MOV     A,R7
0234 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
0235 900000      R     MOV     DPTR,#calc
0238 120000      E     LCALL   ?C?LLDXDATA
023B 900000      R     MOV     DPTR,#sensor
023E E0                MOVX    A,@DPTR
023F FE                MOV     R6,A
0240 7400        R     MOV     A,#LOW CapSense_CSD_sensorBaselineLow
0242 2E                ADD     A,R6
0243 F582              MOV     DPL,A
0245 E4                CLR     A
0246 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorBaselineLow
0248 F583              MOV     DPH,A
024A EF                MOV     A,R7
024B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
024C 900000      R     MOV     DPTR,#sensor
024F E0                MOVX    A,@DPTR
0250 FF                MOV     R7,A
0251 7400        R     MOV     A,#LOW CapSense_CSD_lowBaselineResetCnt
0253 2F                ADD     A,R7
0254 F582              MOV     DPL,A
0256 E4                CLR     A
0257 3400        R     ADDC    A,#HIGH CapSense_CSD_lowBaselineResetCnt
0259 F583              MOV     DPH,A
025B E4                CLR     A
025C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 467
025D         ?C0023:
                                           ; SOURCE LINE # 469
025D         ?C0022:
                                           ; SOURCE LINE # 472
025D 900000      R     MOV     DPTR,#noiseThreshold
0260 E0                MOVX    A,@DPTR
0261 FE                MOV     R6,A
0262 A3                INC     DPTR
0263 E0                MOVX    A,@DPTR
0264 FF                MOV     R7,A
0265 900000      R     MOV     DPTR,#tempRaw
0268 E0                MOVX    A,@DPTR
0269 FC                MOV     R4,A
026A A3                INC     DPTR
026B E0                MOVX    A,@DPTR
026C FD                MOV     R5,A
026D D3                SETB    C
026E ED                MOV     A,R5
026F 9F                SUBB    A,R7
0270 EC                MOV     A,R4
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 49  

0271 9E                SUBB    A,R6
0272 4027              JC      ?C0025
0274 900000      R     MOV     DPTR,#widget
0277 E0                MOVX    A,@DPTR
0278 FF                MOV     R7,A
0279 EF                MOV     A,R7
027A 601F              JZ      ?C0025
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 485
027C 900000      R     MOV     DPTR,#tempRaw
027F E0                MOVX    A,@DPTR
0280 FE                MOV     R6,A
0281 A3                INC     DPTR
0282 E0                MOVX    A,@DPTR
0283 FF                MOV     R7,A
0284 900000      R     MOV     DPTR,#sensor
0287 E0                MOVX    A,@DPTR
0288 FD                MOV     R5,A
0289 ED                MOV     A,R5
028A 25E0              ADD     A,ACC
028C 2400        R     ADD     A,#LOW CapSense_CSD_sensorSignal
028E F582              MOV     DPL,A
0290 E4                CLR     A
0291 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorSignal
0293 F583              MOV     DPH,A
0295 EE                MOV     A,R6
0296 F0                MOVX    @DPTR,A
0297 A3                INC     DPTR
0298 EF                MOV     A,R7
0299 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
029A 22                RET     
029B         ?C0025:
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 491
029B 900000      R     MOV     DPTR,#sensor
029E E0                MOVX    A,@DPTR
029F FF                MOV     R7,A
02A0 EF                MOV     A,R7
02A1 25E0              ADD     A,ACC
02A3 2400        R     ADD     A,#LOW CapSense_CSD_sensorSignal
02A5 F582              MOV     DPL,A
02A7 E4                CLR     A
02A8 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorSignal
02AA F583              MOV     DPH,A
02AC E4                CLR     A
02AD F0                MOVX    @DPTR,A
02AE A3                INC     DPTR
02AF E4                CLR     A
02B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
02B1         ?C0026:
                                           ; SOURCE LINE # 498
02B1         ?C0027:
02B1 22                RET     
             ; FUNCTION _CapSense_CSD_UpdateSensorBaseline (END)

             ; FUNCTION CapSense_CSD_UpdateEnabledBaselines (BEGIN)
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 537
0000 900000      R     MOV     DPTR,#i
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 50  

0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005         ?C0028:
0005 900000      R     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9407              SUBB    A,#07H
000E 5057              JNC     ?C0032
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
0010 900000      R     MOV     DPTR,#i
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 13                RRC     A
0017 13                RRC     A
0018 13                RRC     A
0019 541F              ANL     A,#01FH
001B FF                MOV     R7,A
001C 900000      R     MOV     DPTR,#pos
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 540
0021 900000      R     MOV     DPTR,#i
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 5407              ANL     A,#07H
0029 FF                MOV     R7,A
002A 7401              MOV     A,#01H
002C A807              MOV     R0,AR7
002E 08                INC     R0
002F 8002              SJMP    ?C0084
0031         ?C0083:
0031 C3                CLR     C
0032 33                RLC     A
0033         ?C0084:
0033 D8FC              DJNZ    R0,?C0083
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#enMask
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
003B 900000      R     MOV     DPTR,#pos
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 7400        E     MOV     A,#LOW CapSense_CSD_sensorEnableMask
0042 2F                ADD     A,R7
0043 F582              MOV     DPL,A
0045 E4                CLR     A
0046 3400        E     ADDC    A,#HIGH CapSense_CSD_sensorEnableMask
0048 F583              MOV     DPH,A
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C 900000      R     MOV     DPTR,#enMask
004F E0                MOVX    A,@DPTR
0050 FE                MOV     R6,A
0051 EF                MOV     A,R7
0052 5E                ANL     A,R6
0053 FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 51  

0054 EF                MOV     A,R7
0055 6008              JZ      ?C0030
                                           ; SOURCE LINE # 542
                                           ; SOURCE LINE # 543
0057 900000      R     MOV     DPTR,#i
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C 120000      R     LCALL   _CapSense_CSD_UpdateSensorBaseline
                                           ; SOURCE LINE # 544
005F         ?C0031:
                                           ; SOURCE LINE # 545
005F         ?C0030:
005F 900000      R     MOV     DPTR,#i
0062 E0                MOVX    A,@DPTR
0063 04                INC     A
0064 F0                MOVX    @DPTR,A
0065 809E              SJMP    ?C0028
0067         ?C0029:
                                           ; SOURCE LINE # 546
0067         ?C0032:
0067 22                RET     
             ; FUNCTION CapSense_CSD_UpdateEnabledBaselines (END)

             ; FUNCTION _CapSense_CSD_CheckIsSensorActive (BEGIN)
                                           ; SOURCE LINE # 588
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 593
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 13                RRC     A
000C 13                RRC     A
000D 13                RRC     A
000E 541F              ANL     A,#01FH
0010 FF                MOV     R7,A
0011 900000      R     MOV     DPTR,#pos
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 594
0016 900000      R     MOV     DPTR,#sensor
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 5407              ANL     A,#07H
001E FF                MOV     R7,A
001F 7401              MOV     A,#01H
0021 A807              MOV     R0,AR7
0023 08                INC     R0
0024 8002              SJMP    ?C0086
0026         ?C0085:
0026 C3                CLR     C
0027 33                RLC     A
0028         ?C0086:
0028 D8FC              DJNZ    R0,?C0085
002A FF                MOV     R7,A
002B 900000      R     MOV     DPTR,#onMask
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 52  

                                           ; SOURCE LINE # 596
0030 900000      R     MOV     DPTR,#sensor
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 900000      E     MOV     DPTR,#CapSense_CSD_widgetNumber
0039 93                MOVC    A,@A+DPTR
003A FF                MOV     R7,A
003B 900000      R     MOV     DPTR,#widget
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
0040 900000      R     MOV     DPTR,#widget
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 25E0              ADD     A,ACC
0048 2400        R     ADD     A,#LOW CapSense_CSD_fingerThreshold
004A F582              MOV     DPL,A
004C E4                CLR     A
004D 3400        R     ADDC    A,#HIGH CapSense_CSD_fingerThreshold
004F F583              MOV     DPH,A
0051 E4                CLR     A
0052 93                MOVC    A,@A+DPTR
0053 FE                MOV     R6,A
0054 7401              MOV     A,#01H
0056 93                MOVC    A,@A+DPTR
0057 FF                MOV     R7,A
0058 900000      R     MOV     DPTR,#fingerThreshold
005B EE                MOV     A,R6
005C F0                MOVX    @DPTR,A
005D A3                INC     DPTR
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 598
0060 900000      R     MOV     DPTR,#widget
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 25E0              ADD     A,ACC
0068 2400        R     ADD     A,#LOW CapSense_CSD_hysteresis
006A F582              MOV     DPL,A
006C E4                CLR     A
006D 3400        R     ADDC    A,#HIGH CapSense_CSD_hysteresis
006F F583              MOV     DPH,A
0071 E4                CLR     A
0072 93                MOVC    A,@A+DPTR
0073 FE                MOV     R6,A
0074 7401              MOV     A,#01H
0076 93                MOVC    A,@A+DPTR
0077 FF                MOV     R7,A
0078 900000      R     MOV     DPTR,#hysteresis
007B EE                MOV     A,R6
007C F0                MOVX    @DPTR,A
007D A3                INC     DPTR
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 599
0080 900000      R     MOV     DPTR,#widget
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 EF                MOV     A,R7
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 53  

0086 900000      R     MOV     DPTR,#CapSense_CSD_debounce
0089 93                MOVC    A,@A+DPTR
008A FF                MOV     R7,A
008B 900000      R     MOV     DPTR,#debounce
008E EF                MOV     A,R7
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 601
0090 900000      R     MOV     DPTR,#widget
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
0095 EF                MOV     A,R7
0096 C3                CLR     C
0097 9401              SUBB    A,#01H
0099 501A              JNC     ?C0033
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
009B 900000      R     MOV     DPTR,#debounceIndex
009E 7402              MOV     A,#02H
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
00A1 900000      R     MOV     DPTR,#debounceIndex
00A4 E0                MOVX    A,@DPTR
00A5 FF                MOV     R7,A
00A6 7400        R     MOV     A,#LOW CapSense_CSD_debounceCounter
00A8 2F                ADD     A,R7
00A9 F582              MOV     DPL,A
00AB E4                CLR     A
00AC 3400        R     ADDC    A,#HIGH CapSense_CSD_debounceCounter
00AE F583              MOV     DPH,A
00B0 7401              MOV     A,#01H
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 605
00B3 800D              SJMP    ?C0034
00B5         ?C0033:
                                           ; SOURCE LINE # 607
                                           ; SOURCE LINE # 608
00B5 900000      R     MOV     DPTR,#widget
00B8 E0                MOVX    A,@DPTR
00B9 FF                MOV     R7,A
00BA EF                MOV     A,R7
00BB 14                DEC     A
00BC FF                MOV     R7,A
00BD 900000      R     MOV     DPTR,#debounceIndex
00C0 EF                MOV     A,R7
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 609
00C2         ?C0034:
                                           ; SOURCE LINE # 613
00C2 900000      R     MOV     DPTR,#pos
00C5 E0                MOVX    A,@DPTR
00C6 FF                MOV     R7,A
00C7 7400        R     MOV     A,#LOW CapSense_CSD_sensorOnMask
00C9 2F                ADD     A,R7
00CA F582              MOV     DPL,A
00CC E4                CLR     A
00CD 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorOnMask
00CF F583              MOV     DPH,A
00D1 E0                MOVX    A,@DPTR
00D2 FF                MOV     R7,A
00D3 900000      R     MOV     DPTR,#onMask
00D6 E0                MOVX    A,@DPTR
00D7 FE                MOV     R6,A
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 54  

00D8 EF                MOV     A,R7
00D9 5E                ANL     A,R6
00DA FF                MOV     R7,A
00DB EF                MOV     A,R7
00DC 6076              JZ      ?C0035
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 616
00DE 900000      R     MOV     DPTR,#hysteresis
00E1 E0                MOVX    A,@DPTR
00E2 FE                MOV     R6,A
00E3 A3                INC     DPTR
00E4 E0                MOVX    A,@DPTR
00E5 FF                MOV     R7,A
00E6 900000      R     MOV     DPTR,#fingerThreshold
00E9 E0                MOVX    A,@DPTR
00EA FC                MOV     R4,A
00EB A3                INC     DPTR
00EC E0                MOVX    A,@DPTR
00ED FD                MOV     R5,A
00EE C3                CLR     C
00EF ED                MOV     A,R5
00F0 9F                SUBB    A,R7
00F1 FF                MOV     R7,A
00F2 EC                MOV     A,R4
00F3 9E                SUBB    A,R6
00F4 FE                MOV     R6,A
00F5 900000      R     MOV     DPTR,#sensor
00F8 E0                MOVX    A,@DPTR
00F9 FD                MOV     R5,A
00FA ED                MOV     A,R5
00FB 25E0              ADD     A,ACC
00FD 2400        R     ADD     A,#LOW CapSense_CSD_sensorSignal
00FF F582              MOV     DPL,A
0101 E4                CLR     A
0102 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorSignal
0104 F583              MOV     DPH,A
0106 E0                MOVX    A,@DPTR
0107 FC                MOV     R4,A
0108 A3                INC     DPTR
0109 E0                MOVX    A,@DPTR
010A FD                MOV     R5,A
010B C3                CLR     C
010C ED                MOV     A,R5
010D 9F                SUBB    A,R7
010E EC                MOV     A,R4
010F 9E                SUBB    A,R6
0110 4003              JC      $ + 5H
0112 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
0115 900000      R     MOV     DPTR,#pos
0118 E0                MOVX    A,@DPTR
0119 FF                MOV     R7,A
011A 7400        R     MOV     A,#LOW CapSense_CSD_sensorOnMask
011C 2F                ADD     A,R7
011D F582              MOV     DPL,A
011F E4                CLR     A
0120 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorOnMask
0122 F583              MOV     DPH,A
0124 C083              PUSH    DPH
0126 C082              PUSH    DPL
0128 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 55  

0129 FF                MOV     R7,A
012A 900000      R     MOV     DPTR,#onMask
012D E0                MOVX    A,@DPTR
012E FE                MOV     R6,A
012F EE                MOV     A,R6
0130 F4                CPL     A
0131 FE                MOV     R6,A
0132 EF                MOV     A,R7
0133 5E                ANL     A,R6
0134 FF                MOV     R7,A
0135 D082              POP     DPL
0137 D083              POP     DPH
0139 EF                MOV     A,R7
013A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
013B 900000      R     MOV     DPTR,#debounce
013E E0                MOVX    A,@DPTR
013F FF                MOV     R7,A
0140 900000      R     MOV     DPTR,#debounceIndex
0143 E0                MOVX    A,@DPTR
0144 FE                MOV     R6,A
0145 7400        R     MOV     A,#LOW CapSense_CSD_debounceCounter
0147 2E                ADD     A,R6
0148 F582              MOV     DPL,A
014A E4                CLR     A
014B 3400        R     ADDC    A,#HIGH CapSense_CSD_debounceCounter
014D F583              MOV     DPH,A
014F EF                MOV     A,R7
0150 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 620
0151         ?C0036:
                                           ; SOURCE LINE # 621
0151 020000      R     LJMP    ?C0037
0154         ?C0035:
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 625
0154 900000      R     MOV     DPTR,#hysteresis
0157 E0                MOVX    A,@DPTR
0158 FE                MOV     R6,A
0159 A3                INC     DPTR
015A E0                MOVX    A,@DPTR
015B FF                MOV     R7,A
015C 900000      R     MOV     DPTR,#fingerThreshold
015F E0                MOVX    A,@DPTR
0160 FC                MOV     R4,A
0161 A3                INC     DPTR
0162 E0                MOVX    A,@DPTR
0163 FD                MOV     R5,A
0164 ED                MOV     A,R5
0165 2F                ADD     A,R7
0166 FF                MOV     R7,A
0167 EC                MOV     A,R4
0168 3E                ADDC    A,R6
0169 FE                MOV     R6,A
016A 900000      R     MOV     DPTR,#sensor
016D E0                MOVX    A,@DPTR
016E FD                MOV     R5,A
016F ED                MOV     A,R5
0170 25E0              ADD     A,ACC
0172 2400        R     ADD     A,#LOW CapSense_CSD_sensorSignal
0174 F582              MOV     DPL,A
0176 E4                CLR     A
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 56  

0177 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorSignal
0179 F583              MOV     DPH,A
017B E0                MOVX    A,@DPTR
017C FC                MOV     R4,A
017D A3                INC     DPTR
017E E0                MOVX    A,@DPTR
017F FD                MOV     R5,A
0180 D3                SETB    C
0181 ED                MOV     A,R5
0182 9F                SUBB    A,R7
0183 EC                MOV     A,R4
0184 9E                SUBB    A,R6
0185 404E              JC      ?C0038
                                           ; SOURCE LINE # 626
                                           ; SOURCE LINE # 628
0187 900000      R     MOV     DPTR,#debounceIndex
018A E0                MOVX    A,@DPTR
018B FF                MOV     R7,A
018C 7400        R     MOV     A,#LOW CapSense_CSD_debounceCounter
018E 2F                ADD     A,R7
018F F582              MOV     DPL,A
0191 E4                CLR     A
0192 3400        R     ADDC    A,#HIGH CapSense_CSD_debounceCounter
0194 F583              MOV     DPH,A
0196 E0                MOVX    A,@DPTR
0197 FF                MOV     R7,A
0198 EF                MOV     A,R7
0199 D3                SETB    C
019A 9401              SUBB    A,#01H
019C 5023              JNC     ?C0039
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
019E 900000      R     MOV     DPTR,#pos
01A1 E0                MOVX    A,@DPTR
01A2 FF                MOV     R7,A
01A3 7400        R     MOV     A,#LOW CapSense_CSD_sensorOnMask
01A5 2F                ADD     A,R7
01A6 F582              MOV     DPL,A
01A8 E4                CLR     A
01A9 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorOnMask
01AB F583              MOV     DPH,A
01AD C083              PUSH    DPH
01AF C082              PUSH    DPL
01B1 E0                MOVX    A,@DPTR
01B2 FF                MOV     R7,A
01B3 900000      R     MOV     DPTR,#onMask
01B6 E0                MOVX    A,@DPTR
01B7 FE                MOV     R6,A
01B8 EF                MOV     A,R7
01B9 4E                ORL     A,R6
01BA FF                MOV     R7,A
01BB D082              POP     DPL
01BD D083              POP     DPH
01BF EF                MOV     A,R7
01C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 631
01C1         ?C0039:
                                           ; SOURCE LINE # 632
01C1 900000      R     MOV     DPTR,#debounceIndex
01C4 E0                MOVX    A,@DPTR
01C5 FF                MOV     R7,A
01C6 7400        R     MOV     A,#LOW CapSense_CSD_debounceCounter
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 57  

01C8 2F                ADD     A,R7
01C9 F582              MOV     DPL,A
01CB E4                CLR     A
01CC 3400        R     ADDC    A,#HIGH CapSense_CSD_debounceCounter
01CE F583              MOV     DPH,A
01D0 E0                MOVX    A,@DPTR
01D1 14                DEC     A
01D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 633
01D3 8016              SJMP    ?C0037
01D5         ?C0038:
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 637
01D5 900000      R     MOV     DPTR,#debounce
01D8 E0                MOVX    A,@DPTR
01D9 FF                MOV     R7,A
01DA 900000      R     MOV     DPTR,#debounceIndex
01DD E0                MOVX    A,@DPTR
01DE FE                MOV     R6,A
01DF 7400        R     MOV     A,#LOW CapSense_CSD_debounceCounter
01E1 2E                ADD     A,R6
01E2 F582              MOV     DPL,A
01E4 E4                CLR     A
01E5 3400        R     ADDC    A,#HIGH CapSense_CSD_debounceCounter
01E7 F583              MOV     DPH,A
01E9 EF                MOV     A,R7
01EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 638
01EB         ?C0040:
                                           ; SOURCE LINE # 639
01EB         ?C0037:
                                           ; SOURCE LINE # 641
01EB 900000      R     MOV     DPTR,#pos
01EE E0                MOVX    A,@DPTR
01EF FF                MOV     R7,A
01F0 7400        R     MOV     A,#LOW CapSense_CSD_sensorOnMask
01F2 2F                ADD     A,R7
01F3 F582              MOV     DPL,A
01F5 E4                CLR     A
01F6 3400        R     ADDC    A,#HIGH CapSense_CSD_sensorOnMask
01F8 F583              MOV     DPH,A
01FA E0                MOVX    A,@DPTR
01FB FF                MOV     R7,A
01FC 900000      R     MOV     DPTR,#onMask
01FF E0                MOVX    A,@DPTR
0200 FE                MOV     R6,A
0201 EF                MOV     A,R7
0202 5E                ANL     A,R6
0203 FF                MOV     R7,A
0204 EF                MOV     A,R7
0205 6004              JZ      ?C0041
0207 7F01              MOV     R7,#01H
0209 8002              SJMP    ?C0042
020B         ?C0041:
020B 7F00              MOV     R7,#00H
020D         ?C0042:
                                           ; SOURCE LINE # 642
020D         ?C0043:
020D 22                RET     
             ; FUNCTION _CapSense_CSD_CheckIsSensorActive (END)

             ; FUNCTION _CapSense_CSD_CheckIsWidgetActive (BEGIN)
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 58  

                                           ; SOURCE LINE # 668
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_CSD_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rawIndex
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 672
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_CSD_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rawIndex
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 2E                ADD     A,R6
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#numberOfSensors
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 673
002D 900000      R     MOV     DPTR,#state
0030 E4                CLR     A
0031 F0                MOVX    @DPTR,A
0032         ?C0046:
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 678
0032 900000      R     MOV     DPTR,#rawIndex
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 120000      R     LCALL   _CapSense_CSD_CheckIsSensorActive
003A EF                MOV     A,R7
003B 6006              JZ      ?C0047
                                           ; SOURCE LINE # 679
                                           ; SOURCE LINE # 680
003D 900000      R     MOV     DPTR,#state
0040 7401              MOV     A,#01H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
0043         ?C0047:
                                           ; SOURCE LINE # 682
0043 900000      R     MOV     DPTR,#rawIndex
0046 E0                MOVX    A,@DPTR
0047 04                INC     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 683
0049         ?C0044:
                                           ; SOURCE LINE # 684
0049 900000      R     MOV     DPTR,#numberOfSensors
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 59  

004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 900000      R     MOV     DPTR,#rawIndex
0051 E0                MOVX    A,@DPTR
0052 FE                MOV     R6,A
0053 EE                MOV     A,R6
0054 C3                CLR     C
0055 9F                SUBB    A,R7
0056 40DA              JC      ?C0046
0058         ?C0045:
                                           ; SOURCE LINE # 688
0058 900000      R     MOV     DPTR,#state
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
                                           ; SOURCE LINE # 689
005D         ?C0048:
005D 22                RET     
             ; FUNCTION _CapSense_CSD_CheckIsWidgetActive (END)

             ; FUNCTION CapSense_CSD_CheckIsAnyWidgetActive (BEGIN)
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 716
0000 900000      R     MOV     DPTR,#state
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
0005 900000      R     MOV     DPTR,#i
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
000A         ?C0049:
000A 900000      R     MOV     DPTR,#i
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 C3                CLR     C
0011 9403              SUBB    A,#03H
0013 5019              JNC     ?C0050
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 720
0015 900000      R     MOV     DPTR,#i
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 120000      R     LCALL   _CapSense_CSD_CheckIsWidgetActive
001D EF                MOV     A,R7
001E 6006              JZ      ?C0051
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
0020 900000      R     MOV     DPTR,#state
0023 7401              MOV     A,#01H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 723
0026         ?C0052:
                                           ; SOURCE LINE # 724
0026         ?C0051:
0026 900000      R     MOV     DPTR,#i
0029 E0                MOVX    A,@DPTR
002A 04                INC     A
002B F0                MOVX    @DPTR,A
002C 80DC              SJMP    ?C0049
002E         ?C0050:
                                           ; SOURCE LINE # 727
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 60  

002E 900000      R     MOV     DPTR,#state
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
                                           ; SOURCE LINE # 728
0033         ?C0053:
0033 22                RET     
             ; FUNCTION CapSense_CSD_CheckIsAnyWidgetActive (END)

             ; FUNCTION _CapSense_CSD_EnableWidget (BEGIN)
                                           ; SOURCE LINE # 758
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 760
                                           ; SOURCE LINE # 763
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_CSD_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rawIndex
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 764
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_CSD_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rawIndex
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 2E                ADD     A,R6
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#numberOfSensors
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
002D         ?C0056:
                                           ; SOURCE LINE # 768
                                           ; SOURCE LINE # 769
002D 900000      R     MOV     DPTR,#rawIndex
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 13                RRC     A
0034 13                RRC     A
0035 13                RRC     A
0036 541F              ANL     A,#01FH
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#pos
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 770
003E 900000      R     MOV     DPTR,#rawIndex
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 61  

0044 5407              ANL     A,#07H
0046 FF                MOV     R7,A
0047 7401              MOV     A,#01H
0049 A807              MOV     R0,AR7
004B 08                INC     R0
004C 8002              SJMP    ?C0088
004E         ?C0087:
004E C3                CLR     C
004F 33                RLC     A
0050         ?C0088:
0050 D8FC              DJNZ    R0,?C0087
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#enMask
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 772
0058 900000      R     MOV     DPTR,#pos
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 7400        E     MOV     A,#LOW CapSense_CSD_sensorEnableMask
005F 2F                ADD     A,R7
0060 F582              MOV     DPL,A
0062 E4                CLR     A
0063 3400        E     ADDC    A,#HIGH CapSense_CSD_sensorEnableMask
0065 F583              MOV     DPH,A
0067 C083              PUSH    DPH
0069 C082              PUSH    DPL
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D 900000      R     MOV     DPTR,#enMask
0070 E0                MOVX    A,@DPTR
0071 FE                MOV     R6,A
0072 EF                MOV     A,R7
0073 4E                ORL     A,R6
0074 FF                MOV     R7,A
0075 D082              POP     DPL
0077 D083              POP     DPH
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
007B 900000      R     MOV     DPTR,#rawIndex
007E E0                MOVX    A,@DPTR
007F 04                INC     A
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 774
0081         ?C0054:
                                           ; SOURCE LINE # 775
0081 900000      R     MOV     DPTR,#numberOfSensors
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 900000      R     MOV     DPTR,#rawIndex
0089 E0                MOVX    A,@DPTR
008A FE                MOV     R6,A
008B EE                MOV     A,R6
008C C3                CLR     C
008D 9F                SUBB    A,R7
008E 409D              JC      ?C0056
0090         ?C0055:
                                           ; SOURCE LINE # 778
0090         ?C0057:
0090 22                RET     
             ; FUNCTION _CapSense_CSD_EnableWidget (END)
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 62  


             ; FUNCTION _CapSense_CSD_DisableWidget (BEGIN)
                                           ; SOURCE LINE # 808
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 813
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_CSD_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rawIndex
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 814
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_CSD_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rawIndex
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 2E                ADD     A,R6
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#numberOfSensors
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
002D         ?C0060:
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 819
002D 900000      R     MOV     DPTR,#rawIndex
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 13                RRC     A
0034 13                RRC     A
0035 13                RRC     A
0036 541F              ANL     A,#01FH
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#pos
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 820
003E 900000      R     MOV     DPTR,#rawIndex
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 5407              ANL     A,#07H
0046 FF                MOV     R7,A
0047 7401              MOV     A,#01H
0049 A807              MOV     R0,AR7
004B 08                INC     R0
004C 8002              SJMP    ?C0090
004E         ?C0089:
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 63  

004E C3                CLR     C
004F 33                RLC     A
0050         ?C0090:
0050 D8FC              DJNZ    R0,?C0089
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#enMask
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 822
0058 900000      R     MOV     DPTR,#pos
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 7400        E     MOV     A,#LOW CapSense_CSD_sensorEnableMask
005F 2F                ADD     A,R7
0060 F582              MOV     DPL,A
0062 E4                CLR     A
0063 3400        E     ADDC    A,#HIGH CapSense_CSD_sensorEnableMask
0065 F583              MOV     DPH,A
0067 C083              PUSH    DPH
0069 C082              PUSH    DPL
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D 900000      R     MOV     DPTR,#enMask
0070 E0                MOVX    A,@DPTR
0071 FE                MOV     R6,A
0072 EE                MOV     A,R6
0073 F4                CPL     A
0074 FE                MOV     R6,A
0075 EF                MOV     A,R7
0076 5E                ANL     A,R6
0077 FF                MOV     R7,A
0078 D082              POP     DPL
007A D083              POP     DPH
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 823
007E 900000      R     MOV     DPTR,#rawIndex
0081 E0                MOVX    A,@DPTR
0082 04                INC     A
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 824
0084         ?C0058:
                                           ; SOURCE LINE # 825
0084 900000      R     MOV     DPTR,#numberOfSensors
0087 E0                MOVX    A,@DPTR
0088 FF                MOV     R7,A
0089 900000      R     MOV     DPTR,#rawIndex
008C E0                MOVX    A,@DPTR
008D FE                MOV     R6,A
008E EE                MOV     A,R6
008F C3                CLR     C
0090 9F                SUBB    A,R7
0091 409A              JC      ?C0060
0093         ?C0059:
                                           ; SOURCE LINE # 828
0093         ?C0061:
0093 22                RET     
             ; FUNCTION _CapSense_CSD_DisableWidget (END)

             ; FUNCTION _CapSense_CSD_FindMaximum (BEGIN)
                                           ; SOURCE LINE # 858
0000 900000      R     MOV     DPTR,#offset
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 64  

0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#count
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#fingerThreshold
000D EA                MOV     A,R2
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 EB                MOV     A,R3
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 872
0012 900000      R     MOV     DPTR,#maximum
0015 74FF              MOV     A,#0FFH
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 873
0018 900000      R     MOV     DPTR,#temp
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E E4                CLR     A
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 874
0020 900000      R     MOV     DPTR,#offset
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 7E02              MOV     R6,#02H
0027 EF                MOV     A,R7
0028 8EF0              MOV     B,R6
002A A4                MUL     AB
002B FF                MOV     R7,A
002C AEF0              MOV     R6,B
002E 7400        R     MOV     A,#LOW CapSense_CSD_sensorSignal
0030 2F                ADD     A,R7
0031 F9                MOV     R1,A
0032 7400        R     MOV     A,#HIGH CapSense_CSD_sensorSignal
0034 3E                ADDC    A,R6
0035 FA                MOV     R2,A
0036 7B01              MOV     R3,#01H
0038 900000      R     MOV     DPTR,#startOfSlider
003B 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 971
003E 900000      R     MOV     DPTR,#i
0041 E4                CLR     A
0042 F0                MOVX    @DPTR,A
0043         ?C0062:
0043 900000      R     MOV     DPTR,#count
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 900000      R     MOV     DPTR,#i
004B E0                MOVX    A,@DPTR
004C FE                MOV     R6,A
004D EE                MOV     A,R6
004E C3                CLR     C
004F 9F                SUBB    A,R7
0050 4003              JC      $ + 5H
0052 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 972
                                           ; SOURCE LINE # 974
0055 900000      R     MOV     DPTR,#startOfSlider
0058 120000      E     LCALL   ?C?PLDXDATA
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 65  

005B 900000      R     MOV     DPTR,#i
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 75F002            MOV     B,#02H
0063 EF                MOV     A,R7
0064 A4                MUL     AB
0065 F582              MOV     DPL,A
0067 85F083            MOV     DPH,B
006A E9                MOV     A,R1
006B 2582              ADD     A,DPL
006D F9                MOV     R1,A
006E EA                MOV     A,R2
006F 3583              ADDC    A,DPH
0071 FA                MOV     R2,A
0072 120000      E     LCALL   ?C?ILDPTR
0075 FF                MOV     R7,A
0076 AEF0              MOV     R6,B
0078 900000      R     MOV     DPTR,#fingerThreshold
007B E0                MOVX    A,@DPTR
007C FC                MOV     R4,A
007D A3                INC     DPTR
007E E0                MOVX    A,@DPTR
007F FD                MOV     R5,A
0080 D3                SETB    C
0081 EF                MOV     A,R7
0082 9D                SUBB    A,R5
0083 EE                MOV     A,R6
0084 9C                SUBB    A,R4
0085 4067              JC      ?C0064
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 976
0087 900000      R     MOV     DPTR,#startOfSlider
008A 120000      E     LCALL   ?C?PLDXDATA
008D 900000      R     MOV     DPTR,#i
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 75F002            MOV     B,#02H
0095 EF                MOV     A,R7
0096 A4                MUL     AB
0097 F582              MOV     DPL,A
0099 85F083            MOV     DPH,B
009C E9                MOV     A,R1
009D 2582              ADD     A,DPL
009F F9                MOV     R1,A
00A0 EA                MOV     A,R2
00A1 3583              ADDC    A,DPH
00A3 FA                MOV     R2,A
00A4 120000      E     LCALL   ?C?ILDPTR
00A7 FF                MOV     R7,A
00A8 AEF0              MOV     R6,B
00AA 900000      R     MOV     DPTR,#temp
00AD E0                MOVX    A,@DPTR
00AE FC                MOV     R4,A
00AF A3                INC     DPTR
00B0 E0                MOVX    A,@DPTR
00B1 FD                MOV     R5,A
00B2 D3                SETB    C
00B3 EF                MOV     A,R7
00B4 9D                SUBB    A,R5
00B5 EE                MOV     A,R6
00B6 9C                SUBB    A,R4
00B7 4035              JC      ?C0064
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 66  

                                           ; SOURCE LINE # 977
                                           ; SOURCE LINE # 978
00B9 900000      R     MOV     DPTR,#i
00BC E0                MOVX    A,@DPTR
00BD FF                MOV     R7,A
00BE 900000      R     MOV     DPTR,#maximum
00C1 EF                MOV     A,R7
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 979
00C3 900000      R     MOV     DPTR,#startOfSlider
00C6 120000      E     LCALL   ?C?PLDXDATA
00C9 900000      R     MOV     DPTR,#i
00CC E0                MOVX    A,@DPTR
00CD FF                MOV     R7,A
00CE 75F002            MOV     B,#02H
00D1 EF                MOV     A,R7
00D2 A4                MUL     AB
00D3 F582              MOV     DPL,A
00D5 85F083            MOV     DPH,B
00D8 E9                MOV     A,R1
00D9 2582              ADD     A,DPL
00DB F9                MOV     R1,A
00DC EA                MOV     A,R2
00DD 3583              ADDC    A,DPH
00DF FA                MOV     R2,A
00E0 120000      E     LCALL   ?C?ILDPTR
00E3 FF                MOV     R7,A
00E4 AEF0              MOV     R6,B
00E6 900000      R     MOV     DPTR,#temp
00E9 EE                MOV     A,R6
00EA F0                MOVX    @DPTR,A
00EB A3                INC     DPTR
00EC EF                MOV     A,R7
00ED F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 980
00EE         ?C0066:
                                           ; SOURCE LINE # 981
00EE         ?C0065:
                                           ; SOURCE LINE # 982
00EE         ?C0064:
00EE 900000      R     MOV     DPTR,#i
00F1 E0                MOVX    A,@DPTR
00F2 04                INC     A
00F3 F0                MOVX    @DPTR,A
00F4 020000      R     LJMP    ?C0062
00F7         ?C0063:
                                           ; SOURCE LINE # 984
00F7 900000      R     MOV     DPTR,#maximum
00FA E0                MOVX    A,@DPTR
00FB FF                MOV     R7,A
                                           ; SOURCE LINE # 985
00FC         ?C0067:
00FC 22                RET     
             ; FUNCTION _CapSense_CSD_FindMaximum (END)

             ; FUNCTION _CapSense_CSD_CalcCentroid (BEGIN)
                                           ; SOURCE LINE # 1014
0000 900000      R     MOV     DPTR,#maximum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#offset
0008 ED                MOV     A,R5
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 67  

0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#count
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1017
                                           ; SOURCE LINE # 1019
000F 900000      R     MOV     DPTR,#posPrev
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1020
0014 900000      R     MOV     DPTR,#posNext
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1033
0019 900000      R     MOV     DPTR,#offset
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 7E02              MOV     R6,#02H
0020 EF                MOV     A,R7
0021 8EF0              MOV     B,R6
0023 A4                MUL     AB
0024 FF                MOV     R7,A
0025 AEF0              MOV     R6,B
0027 7400        R     MOV     A,#LOW CapSense_CSD_sensorSignal
0029 2F                ADD     A,R7
002A F9                MOV     R1,A
002B 7400        R     MOV     A,#HIGH CapSense_CSD_sensorSignal
002D 3E                ADDC    A,R6
002E FA                MOV     R2,A
002F 7B01              MOV     R3,#01H
0031 900000      R     MOV     DPTR,#startOfSlider
0034 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1092
0037 900000      R     MOV     DPTR,#maximum
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D C3                CLR     C
003E 9401              SUBB    A,#01H
0040 400D              JC      ?C0068
                                           ; SOURCE LINE # 1093
                                           ; SOURCE LINE # 1094
0042 900000      R     MOV     DPTR,#maximum
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 14                DEC     A
0049 FF                MOV     R7,A
004A 900000      R     MOV     DPTR,#posPrev
004D EF                MOV     A,R7
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1095
004F         ?C0068:
                                           ; SOURCE LINE # 1096
004F 900000      R     MOV     DPTR,#maximum
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 04                INC     A
0056 FF                MOV     R7,A
0057 900000      R     MOV     DPTR,#posNext
005A EF                MOV     A,R7
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 68  

005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1103
005C 900000      R     MOV     DPTR,#startOfSlider
005F 120000      E     LCALL   ?C?PLDXDATA
0062 900000      R     MOV     DPTR,#maximum
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 75F002            MOV     B,#02H
006A EF                MOV     A,R7
006B A4                MUL     AB
006C F582              MOV     DPL,A
006E 85F083            MOV     DPH,B
0071 E9                MOV     A,R1
0072 2582              ADD     A,DPL
0074 F9                MOV     R1,A
0075 EA                MOV     A,R2
0076 3583              ADDC    A,DPH
0078 FA                MOV     R2,A
0079 120000      E     LCALL   ?C?ILDPTR
007C FF                MOV     R7,A
007D AEF0              MOV     R6,B
007F 900000      R     MOV     DPTR,#CapSense_CSD_centroid+02H
0082 EE                MOV     A,R6
0083 F0                MOVX    @DPTR,A
0084 A3                INC     DPTR
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1107
0087 900000      R     MOV     DPTR,#maximum
008A E0                MOVX    A,@DPTR
008B FF                MOV     R7,A
008C EF                MOV     A,R7
008D 7036              JNZ     ?C0069
                                           ; SOURCE LINE # 1108
                                           ; SOURCE LINE # 1109
008F 900000      R     MOV     DPTR,#CapSense_CSD_centroid
0092 E4                CLR     A
0093 F0                MOVX    @DPTR,A
0094 A3                INC     DPTR
0095 E4                CLR     A
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1110
0097 900000      R     MOV     DPTR,#startOfSlider
009A 120000      E     LCALL   ?C?PLDXDATA
009D 900000      R     MOV     DPTR,#posNext
00A0 E0                MOVX    A,@DPTR
00A1 FF                MOV     R7,A
00A2 75F002            MOV     B,#02H
00A5 EF                MOV     A,R7
00A6 A4                MUL     AB
00A7 F582              MOV     DPL,A
00A9 85F083            MOV     DPH,B
00AC E9                MOV     A,R1
00AD 2582              ADD     A,DPL
00AF F9                MOV     R1,A
00B0 EA                MOV     A,R2
00B1 3583              ADDC    A,DPH
00B3 FA                MOV     R2,A
00B4 120000      E     LCALL   ?C?ILDPTR
00B7 FF                MOV     R7,A
00B8 AEF0              MOV     R6,B
00BA 900000      R     MOV     DPTR,#CapSense_CSD_centroid+04H
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 69  

00BD EE                MOV     A,R6
00BE F0                MOVX    @DPTR,A
00BF A3                INC     DPTR
00C0 EF                MOV     A,R7
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1111
00C2 020000      R     LJMP    ?C0070
00C5         ?C0069:
                                           ; SOURCE LINE # 1112
00C5 900000      R     MOV     DPTR,#count
00C8 E0                MOVX    A,@DPTR
00C9 FF                MOV     R7,A
00CA 7E00              MOV     R6,#00H
00CC EF                MOV     A,R7
00CD 24FF              ADD     A,#0FFH
00CF FF                MOV     R7,A
00D0 EE                MOV     A,R6
00D1 34FF              ADDC    A,#0FFH
00D3 FE                MOV     R6,A
00D4 900000      R     MOV     DPTR,#maximum
00D7 E0                MOVX    A,@DPTR
00D8 FD                MOV     R5,A
00D9 7C00              MOV     R4,#00H
00DB EF                MOV     A,R7
00DC B50539            CJNE    A,AR5,?C0071
00DF EE                MOV     A,R6
00E0 B50435            CJNE    A,AR4,?C0071
                                           ; SOURCE LINE # 1113
                                           ; SOURCE LINE # 1114
00E3 900000      R     MOV     DPTR,#startOfSlider
00E6 120000      E     LCALL   ?C?PLDXDATA
00E9 900000      R     MOV     DPTR,#posPrev
00EC E0                MOVX    A,@DPTR
00ED FF                MOV     R7,A
00EE 75F002            MOV     B,#02H
00F1 EF                MOV     A,R7
00F2 A4                MUL     AB
00F3 F582              MOV     DPL,A
00F5 85F083            MOV     DPH,B
00F8 E9                MOV     A,R1
00F9 2582              ADD     A,DPL
00FB F9                MOV     R1,A
00FC EA                MOV     A,R2
00FD 3583              ADDC    A,DPH
00FF FA                MOV     R2,A
0100 120000      E     LCALL   ?C?ILDPTR
0103 FF                MOV     R7,A
0104 AEF0              MOV     R6,B
0106 900000      R     MOV     DPTR,#CapSense_CSD_centroid
0109 EE                MOV     A,R6
010A F0                MOVX    @DPTR,A
010B A3                INC     DPTR
010C EF                MOV     A,R7
010D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1115
010E 900000      R     MOV     DPTR,#CapSense_CSD_centroid+04H
0111 E4                CLR     A
0112 F0                MOVX    @DPTR,A
0113 A3                INC     DPTR
0114 E4                CLR     A
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1116
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 70  

0116 8056              SJMP    ?C0070
0118         ?C0071:
                                           ; SOURCE LINE # 1118
                                           ; SOURCE LINE # 1119
0118 900000      R     MOV     DPTR,#startOfSlider
011B 120000      E     LCALL   ?C?PLDXDATA
011E 900000      R     MOV     DPTR,#posPrev
0121 E0                MOVX    A,@DPTR
0122 FF                MOV     R7,A
0123 75F002            MOV     B,#02H
0126 EF                MOV     A,R7
0127 A4                MUL     AB
0128 F582              MOV     DPL,A
012A 85F083            MOV     DPH,B
012D E9                MOV     A,R1
012E 2582              ADD     A,DPL
0130 F9                MOV     R1,A
0131 EA                MOV     A,R2
0132 3583              ADDC    A,DPH
0134 FA                MOV     R2,A
0135 120000      E     LCALL   ?C?ILDPTR
0138 FF                MOV     R7,A
0139 AEF0              MOV     R6,B
013B 900000      R     MOV     DPTR,#CapSense_CSD_centroid
013E EE                MOV     A,R6
013F F0                MOVX    @DPTR,A
0140 A3                INC     DPTR
0141 EF                MOV     A,R7
0142 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1120
0143 900000      R     MOV     DPTR,#startOfSlider
0146 120000      E     LCALL   ?C?PLDXDATA
0149 900000      R     MOV     DPTR,#posNext
014C E0                MOVX    A,@DPTR
014D FF                MOV     R7,A
014E 75F002            MOV     B,#02H
0151 EF                MOV     A,R7
0152 A4                MUL     AB
0153 F582              MOV     DPL,A
0155 85F083            MOV     DPH,B
0158 E9                MOV     A,R1
0159 2582              ADD     A,DPL
015B F9                MOV     R1,A
015C EA                MOV     A,R2
015D 3583              ADDC    A,DPH
015F FA                MOV     R2,A
0160 120000      E     LCALL   ?C?ILDPTR
0163 FF                MOV     R7,A
0164 AEF0              MOV     R6,B
0166 900000      R     MOV     DPTR,#CapSense_CSD_centroid+04H
0169 EE                MOV     A,R6
016A F0                MOVX    @DPTR,A
016B A3                INC     DPTR
016C EF                MOV     A,R7
016D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1121
016E         ?C0072:
016E         ?C0070:
                                           ; SOURCE LINE # 1129
016E 900000      R     MOV     DPTR,#noiseThreshold
0171 E0                MOVX    A,@DPTR
0172 FE                MOV     R6,A
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 71  

0173 A3                INC     DPTR
0174 E0                MOVX    A,@DPTR
0175 FF                MOV     R7,A
0176 900000      R     MOV     DPTR,#CapSense_CSD_centroid
0179 E0                MOVX    A,@DPTR
017A FC                MOV     R4,A
017B A3                INC     DPTR
017C E0                MOVX    A,@DPTR
017D FD                MOV     R5,A
017E D3                SETB    C
017F ED                MOV     A,R5
0180 9F                SUBB    A,R7
0181 EC                MOV     A,R4
0182 9E                SUBB    A,R6
0183 4021              JC      ?C0073
                                           ; SOURCE LINE # 1130
                                           ; SOURCE LINE # 1131
0185 900000      R     MOV     DPTR,#CapSense_CSD_centroid
0188 E0                MOVX    A,@DPTR
0189 FE                MOV     R6,A
018A A3                INC     DPTR
018B E0                MOVX    A,@DPTR
018C FF                MOV     R7,A
018D 900000      R     MOV     DPTR,#noiseThreshold
0190 E0                MOVX    A,@DPTR
0191 FC                MOV     R4,A
0192 A3                INC     DPTR
0193 E0                MOVX    A,@DPTR
0194 FD                MOV     R5,A
0195 C3                CLR     C
0196 EF                MOV     A,R7
0197 9D                SUBB    A,R5
0198 FF                MOV     R7,A
0199 EE                MOV     A,R6
019A 9C                SUBB    A,R4
019B FE                MOV     R6,A
019C 900000      R     MOV     DPTR,#CapSense_CSD_centroid
019F EE                MOV     A,R6
01A0 F0                MOVX    @DPTR,A
01A1 A3                INC     DPTR
01A2 EF                MOV     A,R7
01A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1132
01A4 8008              SJMP    ?C0074
01A6         ?C0073:
                                           ; SOURCE LINE # 1134
                                           ; SOURCE LINE # 1135
01A6 900000      R     MOV     DPTR,#CapSense_CSD_centroid
01A9 E4                CLR     A
01AA F0                MOVX    @DPTR,A
01AB A3                INC     DPTR
01AC E4                CLR     A
01AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1136
01AE         ?C0074:
                                           ; SOURCE LINE # 1139
01AE 900000      R     MOV     DPTR,#CapSense_CSD_centroid+02H
01B1 E0                MOVX    A,@DPTR
01B2 FE                MOV     R6,A
01B3 A3                INC     DPTR
01B4 E0                MOVX    A,@DPTR
01B5 FF                MOV     R7,A
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 72  

01B6 900000      R     MOV     DPTR,#noiseThreshold
01B9 E0                MOVX    A,@DPTR
01BA FC                MOV     R4,A
01BB A3                INC     DPTR
01BC E0                MOVX    A,@DPTR
01BD FD                MOV     R5,A
01BE C3                CLR     C
01BF EF                MOV     A,R7
01C0 9D                SUBB    A,R5
01C1 FF                MOV     R7,A
01C2 EE                MOV     A,R6
01C3 9C                SUBB    A,R4
01C4 FE                MOV     R6,A
01C5 900000      R     MOV     DPTR,#CapSense_CSD_centroid+02H
01C8 EE                MOV     A,R6
01C9 F0                MOVX    @DPTR,A
01CA A3                INC     DPTR
01CB EF                MOV     A,R7
01CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1142
01CD 900000      R     MOV     DPTR,#noiseThreshold
01D0 E0                MOVX    A,@DPTR
01D1 FE                MOV     R6,A
01D2 A3                INC     DPTR
01D3 E0                MOVX    A,@DPTR
01D4 FF                MOV     R7,A
01D5 900000      R     MOV     DPTR,#CapSense_CSD_centroid+04H
01D8 E0                MOVX    A,@DPTR
01D9 FC                MOV     R4,A
01DA A3                INC     DPTR
01DB E0                MOVX    A,@DPTR
01DC FD                MOV     R5,A
01DD D3                SETB    C
01DE ED                MOV     A,R5
01DF 9F                SUBB    A,R7
01E0 EC                MOV     A,R4
01E1 9E                SUBB    A,R6
01E2 4021              JC      ?C0075
                                           ; SOURCE LINE # 1143
                                           ; SOURCE LINE # 1144
01E4 900000      R     MOV     DPTR,#CapSense_CSD_centroid+04H
01E7 E0                MOVX    A,@DPTR
01E8 FE                MOV     R6,A
01E9 A3                INC     DPTR
01EA E0                MOVX    A,@DPTR
01EB FF                MOV     R7,A
01EC 900000      R     MOV     DPTR,#noiseThreshold
01EF E0                MOVX    A,@DPTR
01F0 FC                MOV     R4,A
01F1 A3                INC     DPTR
01F2 E0                MOVX    A,@DPTR
01F3 FD                MOV     R5,A
01F4 C3                CLR     C
01F5 EF                MOV     A,R7
01F6 9D                SUBB    A,R5
01F7 FF                MOV     R7,A
01F8 EE                MOV     A,R6
01F9 9C                SUBB    A,R4
01FA FE                MOV     R6,A
01FB 900000      R     MOV     DPTR,#CapSense_CSD_centroid+04H
01FE EE                MOV     A,R6
01FF F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 73  

0200 A3                INC     DPTR
0201 EF                MOV     A,R7
0202 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1145
0203 8008              SJMP    ?C0076
0205         ?C0075:
                                           ; SOURCE LINE # 1147
                                           ; SOURCE LINE # 1148
0205 900000      R     MOV     DPTR,#CapSense_CSD_centroid+04H
0208 E4                CLR     A
0209 F0                MOVX    @DPTR,A
020A A3                INC     DPTR
020B E4                CLR     A
020C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1149
020D         ?C0076:
                                           ; SOURCE LINE # 1154
020D 900000      R     MOV     DPTR,#CapSense_CSD_centroid
0210 E0                MOVX    A,@DPTR
0211 FE                MOV     R6,A
0212 A3                INC     DPTR
0213 E0                MOVX    A,@DPTR
0214 FF                MOV     R7,A
0215 AB07              MOV     R3,AR7
0217 AA06              MOV     R2,AR6
0219 E4                CLR     A
021A F9                MOV     R1,A
021B F8                MOV     R0,A
021C 900000      R     MOV     DPTR,#CapSense_CSD_centroid+04H
021F E0                MOVX    A,@DPTR
0220 FE                MOV     R6,A
0221 A3                INC     DPTR
0222 E0                MOVX    A,@DPTR
0223 FF                MOV     R7,A
0224 E4                CLR     A
0225 FC                MOV     R4,A
0226 FD                MOV     R5,A
0227 120000      E     LCALL   ?C?LSUB
022A 900000      R     MOV     DPTR,#numerator
022D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1159
0230 900000      R     MOV     DPTR,#CapSense_CSD_centroid+02H
0233 E0                MOVX    A,@DPTR
0234 FE                MOV     R6,A
0235 A3                INC     DPTR
0236 E0                MOVX    A,@DPTR
0237 FF                MOV     R7,A
0238 AB07              MOV     R3,AR7
023A AA06              MOV     R2,AR6
023C E4                CLR     A
023D F9                MOV     R1,A
023E F8                MOV     R0,A
023F 900000      R     MOV     DPTR,#CapSense_CSD_centroid
0242 E0                MOVX    A,@DPTR
0243 FE                MOV     R6,A
0244 A3                INC     DPTR
0245 E0                MOVX    A,@DPTR
0246 FF                MOV     R7,A
0247 E4                CLR     A
0248 FC                MOV     R4,A
0249 FD                MOV     R5,A
024A 120000      E     LCALL   ?C?LADD
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 74  

024D A804              MOV     R0,AR4
024F A905              MOV     R1,AR5
0251 AA06              MOV     R2,AR6
0253 AB07              MOV     R3,AR7
0255 900000      R     MOV     DPTR,#CapSense_CSD_centroid+04H
0258 E0                MOVX    A,@DPTR
0259 FE                MOV     R6,A
025A A3                INC     DPTR
025B E0                MOVX    A,@DPTR
025C FF                MOV     R7,A
025D E4                CLR     A
025E FC                MOV     R4,A
025F FD                MOV     R5,A
0260 120000      E     LCALL   ?C?LADD
0263 900000      R     MOV     DPTR,#denominator
0266 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1162
0269 900000      R     MOV     DPTR,#numerator
026C 120000      E     LCALL   ?C?LLDXDATA
026F 7808              MOV     R0,#08H
0271 120000      E     LCALL   ?C?LSHL
0274 900000      R     MOV     DPTR,#denominator
0277 120000      E     LCALL   ?C?LLDXDATA0
027A 120000      E     LCALL   ?C?SLDIV
027D C004              PUSH    AR4
027F C005              PUSH    AR5
0281 C006              PUSH    AR6
0283 C007              PUSH    AR7
0285 900000      R     MOV     DPTR,#maximum
0288 E0                MOVX    A,@DPTR
0289 FF                MOV     R7,A
028A E4                CLR     A
028B FC                MOV     R4,A
028C FD                MOV     R5,A
028D FE                MOV     R6,A
028E 7808              MOV     R0,#08H
0290 120000      E     LCALL   ?C?LSHL
0293 AB07              MOV     R3,AR7
0295 AA06              MOV     R2,AR6
0297 A905              MOV     R1,AR5
0299 A804              MOV     R0,AR4
029B A804              MOV     R0,AR4
029D A905              MOV     R1,AR5
029F AA06              MOV     R2,AR6
02A1 AB07              MOV     R3,AR7
02A3 D007              POP     AR7
02A5 D006              POP     AR6
02A7 D005              POP     AR5
02A9 D004              POP     AR4
02AB 120000      E     LCALL   ?C?LADD
02AE 900000      R     MOV     DPTR,#denominator
02B1 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1172
02B4 900000      R     MOV     DPTR,#denominator
02B7 120000      E     LCALL   ?C?LLDXDATA0
02BA 900000      R     MOV     DPTR,#resolution
02BD E0                MOVX    A,@DPTR
02BE FE                MOV     R6,A
02BF A3                INC     DPTR
02C0 E0                MOVX    A,@DPTR
02C1 FF                MOV     R7,A
02C2 EE                MOV     A,R6
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 75  

02C3 33                RLC     A
02C4 95E0              SUBB    A,ACC
02C6 FD                MOV     R5,A
02C7 FC                MOV     R4,A
02C8 120000      E     LCALL   ?C?LMUL
02CB 900000      R     MOV     DPTR,#denominator
02CE 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1175
02D1 900000      R     MOV     DPTR,#denominator
02D4 120000      E     LCALL   ?C?LLDXDATA
02D7 EF                MOV     A,R7
02D8 2400              ADD     A,#00H
02DA FF                MOV     R7,A
02DB EE                MOV     A,R6
02DC 347F              ADDC    A,#07FH
02DE FE                MOV     R6,A
02DF ED                MOV     A,R5
02E0 3400              ADDC    A,#00H
02E2 FD                MOV     R5,A
02E3 EC                MOV     A,R4
02E4 3400              ADDC    A,#00H
02E6 FC                MOV     R4,A
02E7 7810              MOV     R0,#010H
02E9 120000      E     LCALL   ?C?ULSHR
02EC 900000      R     MOV     DPTR,#position
02EF EF                MOV     A,R7
02F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1177
02F1 900000      R     MOV     DPTR,#position
02F4 E0                MOVX    A,@DPTR
02F5 FF                MOV     R7,A
                                           ; SOURCE LINE # 1178
02F6         ?C0077:
02F6 22                RET     
             ; FUNCTION _CapSense_CSD_CalcCentroid (END)

             ; FUNCTION _CapSense_CSD_GetCentroidPos (BEGIN)
                                           ; SOURCE LINE # 1219
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1220
                                           ; SOURCE LINE # 1240
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_CSD_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#offset
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1241
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_CSD_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#count
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 76  

0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1259
0025 900000      R     MOV     DPTR,#widget
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B 25E0              ADD     A,ACC
002D 2400        R     ADD     A,#LOW CapSense_CSD_fingerThreshold
002F F582              MOV     DPL,A
0031 E4                CLR     A
0032 3400        R     ADDC    A,#HIGH CapSense_CSD_fingerThreshold
0034 F583              MOV     DPH,A
0036 E4                CLR     A
0037 93                MOVC    A,@A+DPTR
0038 FA                MOV     R2,A
0039 7401              MOV     A,#01H
003B 93                MOVC    A,@A+DPTR
003C FB                MOV     R3,A
003D 900000      R     MOV     DPTR,#offset
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 900000      R     MOV     DPTR,#count
0045 E0                MOVX    A,@DPTR
0046 FD                MOV     R5,A
0047 120000      R     LCALL   _CapSense_CSD_FindMaximum
004A 900000      R     MOV     DPTR,#maximum
004D EF                MOV     A,R7
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1262
004F 900000      R     MOV     DPTR,#maximum
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 64FF              XRL     A,#0FFH
0057 605E              JZ      ?C0078
                                           ; SOURCE LINE # 1263
                                           ; SOURCE LINE # 1265
0059 900000      R     MOV     DPTR,#widget
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F 25E0              ADD     A,ACC
0061 2400        R     ADD     A,#LOW CapSense_CSD_centroidMult
0063 F582              MOV     DPL,A
0065 E4                CLR     A
0066 3400        R     ADDC    A,#HIGH CapSense_CSD_centroidMult
0068 F583              MOV     DPH,A
006A E4                CLR     A
006B 93                MOVC    A,@A+DPTR
006C FE                MOV     R6,A
006D 7401              MOV     A,#01H
006F 93                MOVC    A,@A+DPTR
0070 FF                MOV     R7,A
0071 900000      R     MOV     DPTR,#widget
0074 E0                MOVX    A,@DPTR
0075 FD                MOV     R5,A
0076 ED                MOV     A,R5
0077 25E0              ADD     A,ACC
0079 2400        R     ADD     A,#LOW CapSense_CSD_noiseThreshold
007B F582              MOV     DPL,A
007D E4                CLR     A
C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 77  

007E 3400        R     ADDC    A,#HIGH CapSense_CSD_noiseThreshold
0080 F583              MOV     DPH,A
0082 E4                CLR     A
0083 93                MOVC    A,@A+DPTR
0084 FC                MOV     R4,A
0085 7401              MOV     A,#01H
0087 93                MOVC    A,@A+DPTR
0088 FD                MOV     R5,A
0089 900000      R     MOV     DPTR,#?_CapSense_CSD_CalcCentroid?BYTE+05H
008C EC                MOV     A,R4
008D F0                MOVX    @DPTR,A
008E A3                INC     DPTR
008F ED                MOV     A,R5
0090 F0                MOVX    @DPTR,A
0091 900000      R     MOV     DPTR,#?_CapSense_CSD_CalcCentroid?BYTE+03H
0094 EE                MOV     A,R6
0095 F0                MOVX    @DPTR,A
0096 A3                INC     DPTR
0097 EF                MOV     A,R7
0098 F0                MOVX    @DPTR,A
0099 900000      R     MOV     DPTR,#maximum
009C E0                MOVX    A,@DPTR
009D FF                MOV     R7,A
009E 900000      R     MOV     DPTR,#offset
00A1 E0                MOVX    A,@DPTR
00A2 FD                MOV     R5,A
00A3 900000      R     MOV     DPTR,#count
00A6 E0                MOVX    A,@DPTR
00A7 FB                MOV     R3,A
00A8 120000      R     LCALL   _CapSense_CSD_CalcCentroid
00AB 7E00              MOV     R6,#00H
00AD 900000      R     MOV     DPTR,#position
00B0 EE                MOV     A,R6
00B1 F0                MOVX    @DPTR,A
00B2 A3                INC     DPTR
00B3 EF                MOV     A,R7
00B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1365
00B5 800A              SJMP    ?C0079
00B7         ?C0078:
                                           ; SOURCE LINE # 1367
                                           ; SOURCE LINE # 1369
00B7 900000      R     MOV     DPTR,#position
00BA 74FF              MOV     A,#0FFH
00BC F0                MOVX    @DPTR,A
00BD A3                INC     DPTR
00BE 74FF              MOV     A,#0FFH
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1378
00C1         ?C0079:
                                           ; SOURCE LINE # 1381
00C1 900000      R     MOV     DPTR,#position
00C4 E0                MOVX    A,@DPTR
00C5 FE                MOV     R6,A
00C6 A3                INC     DPTR
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
                                           ; SOURCE LINE # 1382
00C9         ?C0080:
00C9 22                RET     
             ; FUNCTION _CapSense_CSD_GetCentroidPos (END)

C51 COMPILER V9.51   CAPSENSE_CSD_CSHL                                                     04/17/2020 03:55:00 PAGE 78  



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3313    ----
   CONSTANT SIZE    =     29    ----
   XDATA SIZE       =    138    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
